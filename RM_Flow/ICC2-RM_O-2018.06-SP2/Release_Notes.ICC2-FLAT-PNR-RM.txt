###############################################################################
# Synopsys(R) IC Compiler(TM) II Flat Place and Route Reference Methodology
# Version: O-2018.06-SP2 (October 8, 2018)
# Copyright (C) 2014-2018 Synopsys, Inc. All rights reserved.
###############################################################################

O-2018.06-SP2 Updates
=======================
###############################################################################
Performance, power, and area (PPA) related changes
###############################################################################
* Supports design fusion, which performs logic restructuring using synthesis engine to improve area (with power as a secondary cost) and timing
  - Enabled by PREROUTE_LOGIC_RESTRUCTURING; RM default is area_timing for TNS and leakage-aware area reduction
  - PREROUTE_LOGIC_RESTRUCTURING_WIRELENGTH_COSTING allows control to give more room for logic restructuring
  - Digital-AF license required; only enabled if license is found

* Supports ECO fusion, which blends IC Compiler II, StarRC, and PrimeTime capabilities in a single native invocation system
  - New script eco_opt.tcl: key commands include set_pt_options, report_pt_options, set_starrc_options, check_pt_qor, and eco_opt 
  - New *ECO_OPT* variables are added to icc2_pnr_setup.tcl for controlling the eco_opt features and flow, which include the following:
    - ECO_OPT_PT_PATH: required; specifies path to pt_shell
    - ECO_OPT_STARRC_CONFIG_FILE: optional; specifies the configuration file for StarRC in-design extraction
    - ECO_OPT_TYPE: optional; specifies eco_opt fixing type; if not specified, working on all types
    - ECO_OPT_ACTIVE_SCENARIO_LIST, TCL_USER_ECO_OPT_PRE_SCRIPT, and TCL_USER_ECO_OPT_POST_SCRIPT: generic variables available to other steps.  

###############################################################################
Postroute and Chip finishing
###############################################################################
* Sets time.enable_si_timing_windows to true before route_opt commands
* "Setup for PT delay calculation" section is moved in front of the "Pre-route_opt customizations" section.

###############################################################################
RedHawk Analysis Fusion
###############################################################################
* Minor updates on the descriptions of the REDHAWK_* Tcl variables.
* Added a new variable REDHAWK_APL_FILES for specifying APL files.
* Added a new variable REDHAWK_MISSING_VIA_POS_THRESHOLD for specifying filtering threshold.

###############################################################################
RedHawk Analysis Fusion
###############################################################################
* Adds a new variable REDHAWK_MISSING_VIA_POS_THRESHOLD for missing via voltage threshold filtering.  
  If the threshold is provided, missing vias with voltage threshold between the two metal layers 
  greater than the threshold will be reported in a separate file.  
  By default, all the missing vias will be reported.

* Adds a new variable REDHAWK_APL_FILES to include the Apache Power Lib files for dynamic analysis

###############################################################################
Miscellaneous
###############################################################################
* init_design.tcl is simplified for ease of use
  - In the previous release, all the three branches of the design creation and import part of the flow
    (INIT_DESIGN_INPUT = ASCII, INIT_DESIGN_INPUT = DC_ASCII, and INIT_DESIGN_INPUT = DP_RM_NDM)
    are all in the same init_design.tcl script.  
  - Now the contents for each of these three branches are moved to separate scripts, which are
    init_design.from_ascii.tcl, init_design.from_dc_ascii.tcl, and init_design.from_dp_rm_ndm.tcl.
    The init_design.tcl itself, with the contents moved out, is simplified to show only the conditional 
    statements which call these three scripts depending on the value of INIT_DESIGN_INPUT.
  - If you are only interested in one of the three, such as DC_ASCII, you no longer need to go through
    the other two branches of contents. You can just open up init_design.from_dc_ascii.tcl, without viewing
    the other two scripts, and vice versa.   

* Golden UPF flow updates
  - init_design.tcl: now sets the mv.upf.enable_golden_upf application option to true and uses -supplemental option
    when loading $UPF_SUPPLEMENTAL_FILE
  - write_data.tcl: the save_upf now writes out only supplemental UPF
  - Note: Golden UPF flow is enabled if you select "Golden UPF" for the "Multivoltage or Multisupply" option on RMgen GUI

* Updated jump_start.tcl with bug fixes



O-2018.06 Updates
=======================

###############################################################################
Performance, power, and area (PPA) related changes
###############################################################################
* Adds control to disable merging of integrated-clock-gating (ICG) cells in during the place_opt command
  - Starting with this release, by default, the place_opt command runs the merge_clock_gates feature during
    the initial_place phase. If running with Synopsys physical guidance (SPG), the merge_clock_gates 
    feature is performed during the in initial_opto phase.
  - If this is not preferred, you can set the PLACE_OPT_MERGE_ICGS variable to false, which sets the 
    place_opt.flow.merge_cgs application option to false to disable this feature.

* Updates the commands used in the place_opt step (place_opt.tcl)
  - For non-SPG flow ($PLACE_OPT_SPG_FLOW set to false)
    Previously, the commands used were:
	create_placement -buffering_aware_timing_driven
	place_opt -from initial_drc -to initial_drc
	update_timing
	create_placement -timing_driven -congestion -incremental
	place_opt -from initial_drc -to initial_opto
	place_opt -from final_place
    In this release, the commands are:
	place_opt -from initial_place -to initial_place
	place_opt -from initial_drc -to initial_drc
	update_timing
	create_placement -timing_driven -congestion -incremental
	place_opt -from initial_drc -to initial_opto
	place_opt -from final_place
    Specifically the create_placement -buffering_aware_timing_driven command is replaced by the 
    place_opt -from initial_place -to initial_place command as buffering-aware feature is now on-by-default 
    during the place_opt command.
  - For SPG flow ($PLACE_OPT_SPG_FLOW set to true)
    Previously, the commands used were:
	create_placement -timing_driven -congestion -incremental
	place_opt -from initial_drc -to initial_opto
	place_opt -from final_place
    In this release, commands are updated and simplified:
	set_app_options -name place_opt.flow.do_spg -value true
	place_opt -to initial_opto
	place_opt -from final_place
    Specifically, the new commands make use of the place_opt.flow.do_spg application option to support enhanced Synopsys 
    physical guidance (ESPG).

* Updates related to route driven estimation (RDE), global-route-layer-based (GRLB)optimization, and layer optimization
  - Starting with this release, RDE is on-by-default in IC Compiler II when technology node of the design is 16nm and below.
    RDE is not on-by-default if the technology node is 20nm and above. RM scripts follow the tool default behavior,
    which means RDE is on-by-default for 16nm and below.
    - In addition, RM script enables layer optimization when RDE is enabled (16nm and below).
      Accordingly, the PREROUTE_LAYER_OPTIMIZATION RM variable is set to true for 16nm and below,
      but remains false otherwise.
      This variable sets the place_opt.flow.optimize_layers, place_opt.flow.optimize_layers_overlap_bins,
      clock_opt.flow.optimize_layers, and clock_opt.flow.optimize_layers_overlap_bins application options to true.
  - If the technology node is 20nm and above, IC Compiler II does not enable RDE by default. RM script enables  
    GRLB optimization with the PREROUTE_ROUTE_AWARE_ESTIMATION RM variable set to true. This variable sets the 
    opt.common.use_route_aware_estimation application option to true.  

* Updates low-power placement settings
  - Replaces PREROUTE_LOW_POWER_PLACEMENT with PREROUTE_ENHANCED_LOW_POWER_PLACEMENT_EFFORT
  	- The PREROUTE_LOW_POWER_PLACEMENT variable is removed
	- PREROUTE_ENHANCED_LOW_POWER_PLACEMENT_EFFORT variable sets place.coarse.enhanced_low_power_placement_effort
	  application option. The default is low, same as tool default. 

* The optional high connectivity focused flow is now supported through a flavor side file
  - Removes the HIGH_CONNECTIVITY_FOCUSED variable and all associated contents from scripts
  - Adds a new flavor side file named flavor.high_connectivity_high_congestion_focused.tcl,
    which if sourced, overrides 4 settings: PREROUTE_PLACEMENT_CDR_EFFORT, CTS_ENABLE_GLOBAL_ROUTE,
    CLOCK_OPT_OPTO_PLACE_EFFORT, and CLOCK_OPT_OPTO_CONGESTION_EFFORT for high connectivity high congestion design styles.
  - Just like the other existing flavor side files (flavor.area_power_focused.tcl and flavor.run_time_focused.tcl),
    this new flavor.high_connectivity_high_congestion_focused.tcl is added as a comment at the end of the 
    icc2_pnr_setup.tcl. If you decided to use the flavor side file to override selected settings for the design style,
    uncomment the commented lines to use it.

###############################################################################
Postroute and Chip finishing
###############################################################################
* Updates route_auto.tcl
  - In addition to the exisitng atomic commands, the script now supports single route_auto command.
    Adds a new ROUTE_AUTO_USE_SINGLE_COMMAND variable, which runs a single route_auto command instead of the route_global, route_track,
    and route_detail atomic commands
  - The remove_route_aware_estimation, which removes the GRLB estimation before routing is now only run if GRLB is enabled
    for technology nodes 20nm and above. (For more information, see "Updates related to RDE, GRLB, and layer optimization")

* Updates route_opt.tcl
  - Starting with this release, if version O-2018.06 based cell libraries (CLIB) are present for a routed design, the route_opt 
    command enables PrimeTime delay calculation engine by default. You do not need to set time.use_pt_delay application option,
    or specify path to your library db files.
    To accommodate this tool behavior, the following updates are made:
    For the first route_opt command:
    - Previously, enabling the PrimeTime delay calculation engine was optional and done for the second route_opt command.
      In this release, it is considered on-by-default. Therefore, PrimeTime delay calculation engine enabling is removed from
      the second route_opt command. Also the ROUTE_OPT_PT_DELAY_CALCULATION variable is removed. 
    - A section named "Setup for PrimeTime delay calculation" is added before the first route_opt command.
      This section enables settings recommended for the PrimeTime delay calculation engine,
      which includes asymptotic waveform evaluation (AWE) (time.delay_calc_waveform_analysis_mode = full_design and 
      time.awp_compatibility_mode = false), CCS receiver model (time.enable_ccs_rcv_cap = true), and signal integrity 
      timing window (time.enable_si_timing_windows = true)
    - However if you do not have cell libraries (CLIB) generated using version O-2018.06 for your design, you can manually enable 
      the PrimeTime delay calculation engine. The RM script will enable it for you if the ROUTE_OPT_PT_DELAY_CALCULATION_DB_PATH variable 
      is specified, assuming that you specify the path to your db files, which is necessary because the cell libraries for your design 
      are not generated using version O-2018.06.
    For the second route_opt command:
    - The two optional features, PrimeTime delay calculation with path based analysis (PBA) (ROUTE_OPT_PT_DELAY_CALCULATION_WITH_PBA) and 
      PrimeTime delay calculation with StarRC in-design extraction (ROUTE_OPT_STARRC_CONFIG_FILE) remain available.
    - The example script for configuring StarRC in-design extraction, route_opt.starrc_in_design_config_example.txt, is renamed to 
      route_opt.starrc_config_example.txt
    For the third route_opt command: no changes.

* Updates icv_in_design.tcl to support both double-patterning technology (DPT) and non-DPT fixing.
  Non-DPT fixing is done first, followed by DPT fixing.  Previously it is either non-DPT fixing or DPT fixing, but not both.

###############################################################################
RedHawk Analysis Fusion
###############################################################################
* Completely replaces the "PrimeRail In-Design" contents with the "Redhawk Fusion Analysis" contents
  - Replaces the in_design_pnr_rail_analysis.tcl script with the new redhawk_in_design_pnr.tcl script.
  - Removes all existing PRIMERAIL_* variables and related contents.
    - Adds REDHAWK_* variables to the setup files.

 - Adds support for RedHawk Analysis Fusion analysis
  - New file
    - redhawk_in_design_pnr.tcl
      This script uses RedHawk Analysis Fusion to perform the following analyses 
      on the power grid structure: 
	- Missing Via and Unconnected Instance Checking 
	- Missing Via Insertion
	- Static Rail Analysis 
	- Vectorless Dynamic Rail Analysis
	- Vector-Based Dynamic Rail Analysis
	- Electromigration Analysis
	- Minimum Path Resistance
	- Effective Resistance

     You control the RedHawk Analysis Fusion functions by setting the RedHawk 
      Analysis Fusion variables (REDHAWK_*) in icc2_pnr_setup.tcl
      and icc2_common_setup.tcl.
    - New target in Makefile_pnr
	  - redhawk_in_design
       New optional target for running RedHawk Analysis Fusion.
  - New variables
    - Adds new variables with the REDHAWK_ prefix to icc2_pnr_setup.tcl
      and icc2_common_setup.tcl.
 
###############################################################################
Miscellaneous
###############################################################################
* Consolidation of the setting scripts
  In this release, to improve ease of use, the setting scripts (settings.*.tcl) are consolidated to a fewer number of scripts.
  - Previously there were nine setting scripts that were used by the main scripts (such as place_opt.tcl),
    which were:
	settings.common.non_persistent.tcl
	settings.common.opt.tcl
	settings.common.cts.tcl
	settings.common.routing.tcl
	settings.step.place_opt.tcl
	settings.step.clock_opt_cts.tcl
	settings.step.route_auto.tcl
	settings.step.route_opt.tcl
	settings.step.chip_finish.tcl
    Most of the settings.common.*.tcl and the settings.step.place_opt.tcl were all sourced only by place_opt.tcl.
  - In this release, the settings are consolidated and the number of scripts are reduced and renamed to the following five scripts:
	settings.non_persistent.tcl	-> sourced by each script for non-persistent settings
	settings.place_opt.tcl		-> sourced by place_opt.tcl
	settings.clock_opt_cts.tcl	-> sourced by clock_opt_cts.tcl
	settings.route_auto.tcl		-> sourced by route_auto.tcl
	settings.route_opt.tcl 		-> sourced by route_opt.tcl
    The settings.place_opt.tcl script now includes settings that can be applied before the place_opt step starts,
    such as placement, optimization, CTS, routing, and legalization settings which are not step sensitive.

* Removes save_lib commands across the scripts under the rm_icc2_pnr_scripts/ directory, as it is no longer needed 
  (RM script by default only works on current block)

* Removes the USE_RM_BLOCK_NAME_AS_LABEL variable and the use of this variable from all scripts.
  (RM script now recommends using labels by default)

* Adds support for parallel_execute command in write_data.tcl
  - write_verilog, write_def, write_gds, and write_oasis commands are updated to support
    parallel_execute command more easily.

* Renames route_opt.starrc_in_design_config_example.txt to route_opt.starrc_config_example.txt

* In report_qor.*.tcl, addes support for the check_routes -open_net false command after CTS is done.


N-2017.09-SP4 Updates
=======================
###############################################################################
PPA (performance, power, and area) related changes
###############################################################################
* Supports the enhanced low power placement (dynamic-power-driven placement) feature as optional in settings.common.opt.tcl
  - New RM variable: PREROUTE_ENHANCED_LOW_POWER_PLACEMENT_EFFORT
  - Updates the settings.common.opt.tcl script to set the place.coarse.elpp_effort application option.
    Default value: none. You can set it to low or medium.
  - This feature affects the place_opt final_place phase, the clock_opt final_opto phase, the create_placement ¡Vincremental command, 
    and the create_placement -use_seed_locs command for better dynamic and total power.
    The increased efforts change the priority of dynamic power over timing and wire length during placement.  
    This feature ignores the place.coarse.low_power_placement setting.

* Enables PLACE_OPT_MODEL_CLOCK_NDR by default
  - This feature enables clock NDR modeling at place_opt step by running the mark_clock_trees -routing_rules 
    to make place_opt recognize the rules on the clock nets.
  - In the previous release, the feature is optional. In this release, it becomes on-by-default.

* Removes the CTS_LOW_POWER variable and the associated commands from settings.common.cts.tcl
  - This variable enables the cts.common.enable_low_power application option to improve CTS power.
  - Removes the cts.common.enable_low_power application option from the RM script because this application option is 
    now on by default in IC Compiler II. It is recommended to enable the CTS_LOW_POWER variable.

* Starting with the N-2017.09-SP4 release, IC Compiler II NPO infrastructure is available at many optimization stages 
  throughout the flow. The following features are no longer supported by NPO. As a result, they are removed.
  - Removes the refine_opt command from various scripts 
    - Features removed: standalone refine_opt; the instance name prefix, layer and NDR optimization, and 
      repeatability setting for the refine_opt command.
    - Features replaced: the refine_opt command in multibit banking/debanking is replaced by the place_opt -from 
      final_place command
    - Updated scripts: place_opt.tcl, settings.step.place_opt.tcl, settings.common.opt.tcl, and clock_opt_opto.tcl
  - Removes the comments about the "Percentage lvth flow" recommendations from settings.common.opt.tcl,
    since it is no longer supported by NPO.
  - Removes the PLACE_OPT_DO_PATH_OPT variable and the associated commands from settings.common.opt.tcl,
    since it is no longer supported by NPO. 

* Updates the route_opt CCD interface
  - Renames the Tcl variabe ROUTE_OPT_ENABLE_CCD to ROUTE_OPT_CCD_IN_FIRST_RUN, which controls the CCD in first route_opt.
    RM default is true.
  - Adds ROUTE_OPT_CCD_IN_SECOND_RUN to control the CCD in second route_opt. RM default is false.
    Note: in the previous release, CCD is enabled in the second route_opt. It's now disabled.

* Updates the PrimeTime delay-calculation-based route_opt command and supports the Path-Based Analysis (PBA) in route_opt.tcl
  - In the previous release, this was performed as an additional route_opt run after the 3 default route_opt command runs were done.
    The configuration file for StarRC In-Design extraction was also required to enable this feature.
  - In this release, the route_opt.tcl has the following updates:
    1. PrimeTime delay calculation is now enabled in the second route_opt run.
    2. ROUTE_OPT_STARRC_CONFIG_FILE, if specified, enables StarRC in-design extraction in addition to PrimeTime delay calculation,
       becomes optional. You can run PT delay calculation based route_opt either with or without StarRC in-design extraction.
    3. This feature also enables the recommended Advanced Waveform Propagation (AWP) and Composite Current Source (CCS) settings.
       The following application options are enabled accordingly: time.delay_calc_waveform_analysis_mode, time.awp_compatibility_mode,
       and time.enable_ccs_rcv_cap. Optionally, you can enable the time.enable_si_timing_windows application option.
    4. Renamed variables:
       Renames ROUTE_OPT_WITH_STARRC_PT to ROUTE_OPT_PT_DELAY_CALCULATION for enabling the feature.
       Renames ROUTE_OPT_PT_DELAY_CALC_DB_LOCATION to ROUTE_OPT_PT_DELAY_CALCULATION_DB_PATH for specifying the .db path.
    5. Supports PrimeTime delay calculation with PBA in route_opt.
       New variable: ROUTE_OPT_PT_DELAY_CALCULATION_WITH_PBA
       This variable sets the time.pba_optimization_mode application option to enable PBA during the second route_opt run.
       PrimeTime delay calculation needs to be enabled before this variable.

###############################################################################
Timing related changes
###############################################################################
* Updates the POCV settings in init_design.tcl
  - Supports slew variation in addition to constraint variation; both are added as comments.
   (Previously constraint variation was set when LVF string was detected in the report_ocvm report.)

* Supports AWP as an optional feature in settings.step.route_opt.tcl
  - New RM variable: ROUTE_OPT_ENABLE_AWP
  - Sets time.delay_calc_waveform_analysis_mode to full_design to enable the AWP feature.
  - Sets time.awp_compatibility_mode to false to enable the new AWP engine.
  - This is recommended for advanced-node designs, especially 10nm and below.

###############################################################################
Node-specific changes
###############################################################################
* The Technology Node option has new 14nm and 16nm selections on the SolvNet RM generation page.
  - Selecting 14nm or 16nm retrieves the same contents, except that 16nm contains some foundry-specific settings
    that are required to be in a separate download (as known as side files), due to the NDA restriction.
  - If you select 16nm for the Technology Node option, the foundry option will appear,
    which allows you to enter the foundry name in a text entry field. From there, 
    you can download the main scripts and then get the side files through your Synopsys support.
  - If you select 14nm for the Technology Node option, no foundry option will appear,
    as it does not contain foundry-specific settings.


N-2017.09-SP2 Updates
=======================

###############################################################################
Flow changes
###############################################################################
Updates for all scripts
* The RM default flow and the RM+ flow have been consolidated into one flow. As 
  a result, the optimization flow selection is no longer needed and is removed.
  - In the previous releases, you defined OPTIMIZATION_FLOW in the 
    icc_pnr_setup.tcl script to specify the desired flow. For example, you 
    specified rm_default for the RM default flow, and specified
    - hplp for the RM+ HPLP flow
    - arlp for the RM+ ARLP flow
    - hc for the RM+ HC flow
  - In this release, the OPTIMIZATION_FLOW variable is removed. RM runs with 
    one single default flow out of the box.
    - All scripts have been updated and there are no more OPTIMIZATION_FLOW 
      dependent variables, settings, or commands.
    - The new HIGH_CONNECTIVITY_FOCUSED variable is available to enable 4 
      additional application options for the high-connectivity-focused designs.
      When enabled, the application options are toggled on the top of the 
      default flow, and there is some slight modification to the first pass of 
      the place_opt command.
  
  In summary, the rm_default, hplp and arlp flows have been consolidated into 
  one default flow in this release. You can enable the customizations for the 
  for the high-connectivity-focused designs on the top of the new single flow 
  by using the HIGH_CONNECTIVITY_FOCUSED variable. 

###############################################################################
PPA (performance, power, and area) related changes
###############################################################################
* Supports automatic timing control for the timing-driven coarse placement
  - Adds the new Tcl PREROUTE_AUTO_TIMING_CONTROL_PLACEMENT variable to control 
    the place.coarse.auto_timing_control application option. When this variable 
    is set to true (the default), the timing-driven placer performs timing 
    optimization on the most critical timing paths to find a good balance 
    between WNS and TNS.
  - Removes the Tcl PREROUTE_TNS_DRIVEN_PLACEMENT variable which controls the 
    place.coarse.tns_driven_placement application option. The 
    place.coarse.auto_timing_control application option overrides and 
    automatically enables the place.coarse.tns_driven_placement application 
    option.

* Changes the buffering-aware timing-driven initial placement to be ON by 
  default
  - The existing Tcl PLACE_OPT_BUFFERING_AWARE_PLACEMENT variable is now set to 
    true to run additional create_placement -buffering_aware_timing_driven 
    commands.
    The variable was set to false by default in the previous release. 

* Updates to MSCTS in general
  - Addes the new Tcl TCL_REGULAR_MSCTS_FILE and TCL_STRUCTURAL_MSCTS_FILE
    variables which replace the TCL_MSCTS_SETUP_FILE in the previous release.
    If both files are specified, script will source TCL_STRUCTURAL_MSCTS_FILE
    first followed by TCL_REGULAR_MSCTS_FILE.
  - Adds the new Tcl CLOCK_OPT_MSCTS_SCENARIO and PLACE_OPT_MSCTS_SCENARIO 
    variables to specify the critical scenario as the current scenario for 
    MSCTS. If PLACE_OPT_MSCTS is enabled, specify PLACE_OPT_MSCTS_SCENARIO. 
    Otherwise, specify CLOCK_OPT_MSCTS_SCENARIO if you want to enable MSCTS at 
    the clock_opt step. MSCTS currently works on a single scenario, so it is 
    recommended that you specify a scenario with the worst RC and all sinks 
    visible. The script sets the specified scenario as current_scenario before 
    MSCTS, and then restores the original current_scenario afterwards.

 Supports MSCTS in place_opt
  - Adds the new Tcl PLACE_OPT_MSCTS variable to enable the regular MSCTS at 
    the place_opt step.
  - When enabled:
    - Runs regular MSCTS in two parts. First part runs at the place_opt step,
      which sources the TCL_REGULAR_MSCTS_FILE. Second parts runs at the 
      clock_opt_cts step, skipping TCL_REGULAR_MSCTS_FILE, but propagates
      clocks and runs clock mesh simulation.
  - By default, the variable runs in the ideal clock mode. If 
    PLACE_OPT_OPTIMIZE_ICGS or PLACE_OPT_TRIAL_CTS is also enabled, the 
    propagated clocks are used throughout the place_opt step.

* Added a note (in comment) to the "CTS Latency adjustments for 
  compute_clock_latency" section to indicate that compute_clock_latency is 
  automatically performed during place_opt if trial_clock or optimize_icgs is 
  enabled.

* Supports to the new clustering and re-clustering engine during CTS 
  - Adds the new Tcl CTS_LOW_POWER variable to control 
    cts.common.enable_low_power. By default, the variable is set to false, 
    which helps reduce the wire length and improve the clock tree power.

* Updates clock NDR modeling in place_opt
  - In the previous release, the modeling was enabled when 
    PLACE_OPT_CLOCK_NDR_RULE_NAME was specified, which then run the 
    create_routing_rule and set_routing_rule commands to set up the NDR on the 
    clock nets before place_opt. The script then run the 
    set_routing_rule -clear command to remove those rules, followed by the 
    actual clock NDR creation by using the create_routing_rule and 
    set_clock_routing_rule commands for CTS.
    
    This operation was conditional.
    - The clock NDR modeling only took place if neither PLACE_OPT_OPTIMIZE_ICGS 
      nor PLACE_OPT_TRIAL_CTS was enabled. 
    - If either PLACE_OPT_OPTIMIZE_ICGS or PLACE_OPT_TRIAL_CTS was enabled 
      during place_opt, the actual clock NDR setup by using the 
      create_routing_rule and set_clock_routing_rule commands would be done 
      before place_opt. No modeling was required and executed.
    - If none of the place_opt clock NDR modeling, PLACE_OPT_OPTIMIZE_ICGS or 
      PLACE_OPT_TRIAL_CTS was enabled, RM run the default flow where the 
      clock NDR setup was done right before CTS (instead of place_opt). 

  - In this release, RM simplifies the usages of the clock NDR modeling.
    - Now the actual clock NDR creation by using the create_routing_rule and 
      set_clock_routing_rule commands will always take place before place_opt, 
      regardless of which aforementioned features are enabled.
    - The operation satisfies the requirements of the default flow, as well as 
      those of the OPT_OPTIMIZE_ICGS and PLACE_OPT_TRIAL_CTS commands.
    - For clock NDR modeling in place_opt, when PLACE_OPT_MODEL_CLOCK_NDR 
      is set to true, the script runs an additional mark_clock_trees -routing_rules 
      command to allow clock NDR to be recognized by place_opt for modeling 
      congestion impacts.
    - All relevant scripts have been updated. 
      - Adds a new Tcl PLACE_OPT_MODEL_CLOCK_NDR variable to enable clock NDR 
        modeling in place_opt.
        If enabled, the script runs an additional mark_clock_trees -routing_rules 
        command to allow the clock NDR setup to be recognized by place_opt.
      - Moves the "Clock NDR examples" section, which creates and associates the clock 
        NDR, from settings.common.cts.tcl to settings.common.opt.tcl. Therefore, the 
	clock NDR is now always done before place_opt.
      - Moves the "Non-Clock NDR" section from settings.common.routing.tcl to 
	settings.common.opt.tcl
      - Removes all the previous PLACE_OPT_CLOCK_NDR related variables and contents  

###############################################################################
Chip finish and IC Validator In-Design related changes
###############################################################################
Updates to the chip_finish step and the signoff_drc step
* The commands and the sequence of how the commands are run in these two steps 
  have been rearranged.
  - In the previous release, the signoff_drc step runs before chip_finish in the 
    flow to perform signoff_check_drc and signoff_fix_drc. Next was the 
    chip_finish step to perform decoupling capacitance cell insertion, regular 
    filler cell insertion, signoff_create_metal_fill, EM check and fixing.
  - In this release, the chip_finish step runs first to perform decoupling 
    capacitance cell insertion, regular filler cell insertion, EM check and 
    fixing. The signoff_drc step is renamed to icv_in_design to perform all IC 
    Validator In-Design commands, such as signoff_check_drc, signoff_fix_drc, 
    as well as signoff_create_metal_fill, in one step.
    All corresponding scripts have been updated to reflect this change.

* Renamed files
    - Renames signoff_drc.tcl to icv_in_design.tcl
    - Renames any side files with signoff_drc.tcl as a prefix in the name to 
      icv_in_design.tcl as a prefix
* Removed files
    - settings.step.signoff_drc.tcl (no longer needed as settings are moved 
      to icv_in_design.tcl) 
* Renamed variables (variables that are defined in icc2_pnr_setup.tcl)
			From					To
	-------------------------------------------------------------------------
	SIGNOFF_DRC_ACTIVE_SCENARIO_LIST	ICV_IN_DESIGN_ACTIVE_SCENARIO_LIST
	TCL_USER_SIGNOFF_DRC_PRE_SCRIPT 	TCL_USER_ICV_IN_DESIGN_PRE_SCRIPT
	TCL_USER_SIGNOFF_DRC_POST_SCRIPT 	TCL_USER_ICV_IN_DESIGN_POST_SCRIPT
	SIGNOFF_DRC_RUNSET			ICV_IN_DESIGN_DRC_CHECK_RUNSET
	SIGNOFF_DRC_RUNDIR_BEFORE_ADR		ICV_IN_DESIGN_DRC_CHECK_RUNDIR
	SIGNOFF_DRC_ADR				ICV_IN_DESIGN_ADR
	SIGNOFF_DRC_DPT_RULES			ICV_IN_DESIGN_ADR_DPT_RULES
	SIGNOFF_DRC_RUNDIR_ADR			ICV_IN_DESIGN_ADR_RUNDIR
	SIGNOFF_DRC_RUNDIR_AFTER_ADR		ICV_IN_DESIGN_POST_ADR_RUNDIR
	CHIP_FINISH_CREATE_METAL_FILL		ICV_IN_DESIGN_METAL_FILL
	CHIP_FINISH_CREATE_METAL_FILL_RUNDIR	ICV_IN_DESIGN_METAL_FILL_RUNDIR
	CHIP_FINISH_CREATE_METAL_FILL_TIMING_DRIVEN_THRESHOLD ICV_IN_DESIGN_METAL_FILL_TIMING_DRIVEN_THRESHOLD
	CHIP_FINISH_CREATE_METAL_FILL_RUNSET	ICV_IN_DESIGN_METAL_FILL_RUNSET
	CHIP_FINISH_CREATE_METAL_FILL_TRACK_BASED ICV_IN_DESIGN_METAL_FILL_TRACK_BASED
	CHIP_FINISH_CREATE_METAL_FILL_TRACK_BASED_PARAMETER_FILE ICV_IN_DESIGN_METAL_FILL_TRACK_BASED_PARAMETER_FILE
	CHIP_FINISH_CREATE_METAL_FILL_RUNDIR	ICV_IN_DESIGN_POST_METAL_FILL_RUNDIR


* Updates to chip_finish.tcl
  - Updates the input block name from SIGNOFF_DRC_BLOCK_NAME to 
    ROUTE_OPT_BLOCK_NAME, since the chip_finish step now runs after route_opt.
  - Moves the "Signal EM analysis and fix" section before the Post-chip_finish 
    customizations" section.
  - Moves the signoff_create_metal_fill section to icv_in_design.tcl.

###############################################################################
Miscellaneous changes
###############################################################################
* Adds the reporting command for library cells to each major script before the 
  core command starts. This allows you to track the progression of the changes 
  made on the library cells.
  - place_opt.tcl, clock_opt_cts.tcl, clock_opt_opto.tcl, 
    route_auto.tcl,route_opt.tcl,chip_finish.tcl, and icv_in_design.tcl are 
    updated to reflect the change.

* Updates to report_qor.nosplit.tcl and report_qor.tcl
  - Adds report_clock -mode command

* Replaces "report_app_options -non_default" with "report_app_options 
  -non_default *" in all scripts

* Adds vc_lp to Makefile_pnr as an optional step to support the Verification 
  Compiler low-power static signoff flow. This makes the vc_lp.tcl script to be 
  part of the Makefile steps. 

* Updates to write_data.tcl
  - Enables the compression option (-compress) for the write_parasitics and 
    write_script commands
  - Adds support for the write_oasis command which employs command options 
    almost identical to those of the write_gds command, except the additional 
    -compress 6 option. 

* Adds the recommended repeatability settings to produce repeatable results for 
  the place_opt, refine_opt, clock_opt, and route_global steps. 
  These settings are added as comments in settings.common.opt.tcl.

* Supports set_freeze_port to prevent optimization from modifying the ports
  - Adds a new OPTIMIZATION_FREEZE_PORT_LIST variable to specify a list of 
    cells (for example, the clock gen modules or the customized logics that 
    should not be touched) to which the freeze_ports attribute will be set to 
    prevent optimization from modifying their port signature, especially 
    if you do formal verification by modules. 
  - If specified, the script sets opt.dft.hier_preservation to true and runs 
    the set_freeze_port -all command on the specified names.

* Renamed or updated Tcl variables
  - Replaces PREROUTE_TIMING_OPTIMIZATION_EFFORT_HIGH with 
    PREROUTE_TIMING_OPTIMIZATION_EFFORT, with the default setting as high.
    You can now also specify the value as low or medium.
  - Replaces PLACE_OPT_FINAL_PLACE_EFFORT_HIGH with 
    PLACE_OPT_FINAL_PLACE_EFFORT, with the default setting as high.
    You can now also specify the value as low or medium.
  - Replaces PLACE_OPT_CONGESTION_EFFORT_HIGH with PLACE_OPT_CONGESTION_EFFORT, 
    with the default setting as high.
    You can now also specify the value as low or medium.
  - Removes PREROUTE_PLACEMENT_PRECLUSTER since the tool default is already 
    true.
  - Removes PLACE_OPT_CONTINUE_ON_MISSING_SCANDEF. The underlying setting of 
    place.coarse.continue_on_missing_scandef is now added as a comment.
  - Removes PREROUTE_PLACEMENT_CDR_EFFORT, CTS_ENABLE_GLOBAL_ROUTE, 
    CLOCK_OPT_OPTO_PLACE_EFFORT_HIGH, and CLOCK_OPT_OPTO_CONGESTION_EFFORT_HIGH.
    The underlying settings are now all triggered by the new Tcl 
    HIGH_CONNECTIVITY_FOCUSED variable.



N-2017.09 Updates
=================

###############################################################################
Flow changes
###############################################################################
Updates for all scripts
* The optimization flow no longer supports the "ttr" flow selection if you 
  define OPTIMIZATION_FLOW in the icc2_pnr_setup.tcl script.
* Renames "qor" to "rm_default" in the OPTIMIZATION_FLOW selection.  
  The optimization flow now provides the following selections:
  - rm_default, the starting point for typical design styles and is the 
    baseline of IC Compiler II RM place and route flow
  - hplp, the starting point for high performance design styles with low power 
    requirements
  - arlp, the starting point for area-reduction focused design styles with low 
    power requirements
  - hc, the starting point for high-connectivity design styles

###############################################################################
PPA (performance, power, and area) related changes
###############################################################################
Updates to place_opt.tcl
* Supports buffering-aware placement (BAP) as an optional feature 
  - BAP enables timing-driven placement using an approximate timing model that 
    estimates the effects of buffering long nets, allowing the placer to better
    handle high-fanout nets later in the flow. This gives a better starting 
    point for later timing optimizations.
  - Adds a new Tcl variable, PLACE_OPT_BUFFERING_AWARE_PLACEMENT, to enable the 
    feature, which runs an additional create_placement with the 
    -buffering_aware_timing_driven option after first create_placement.
  - Affects only the first pass of the two-pass place_opt flow in 
    place_opt.tcl.
  - Has no effect in the SPG flow if PLACE_OPT_SPG_FLOW is set to true.
  - In the previous release, the place_opt -to initial_drc command was used in 
    the first pass. The command is now broken down into the following commands 
    where BAP is in the middle and is optional:
    - create_placement
    - create_placement -buffering_aware_timing_driven 
    - place_opt -from initial_drc -to initial_drc

Updates to settings.common.opt.tcl
* Avoids expensive legality checks
  - Adds a comment to set place.legalize.limit_legality_checks to true to improve
    legalizer turn-around time. (It is set to false by default in the tool.)

Updates to settings.common.cts.tcl
* Updates the "CTS max transition and capacitance" example section
  - foreach_in_collection is now used to loop through the modes to set maximum 
    capacitance and maximum transition values on the clock paths.

Updates to structural MSCTS script, mscts_example.structural.tcl
 * Supports the subtree logic level balancing during 
   synthesize_multisource_clock_subtrees 

Updates to settings.step.route_opt.tcl
* New AWP engine: Adds a comment to show how to switch to the new AWP engine 
  when AWP is enabled by setting time.awp_compatibility_mode to false (the 
  default is true). In general, timing is more aligned with PrimeTime results 
  using the new AWP engine. 
  Note: This only takes effect when you also enable AWP by setting 
  time.delay_calc_waveform_analysis_mode to full_design.

Updates to route_opt.tcl
* Sets route_opt.flow.enable_clock_power_recovery to none
 - Disables the feature for power recovery from clock cells and registers 
   during route_opt for the last route_opt run. It is still enabled for the 
   first route_opt run in the RM default flow and the first two route_opt runs 
   in the RM+ flow.

###############################################################################
RM+ related changes
###############################################################################
Updates to settings.common.opt.tcl
* Enables ultra CDR effort for RM+ HC flow 
  - Adds the Tcl variable, PREROUTE_PLACEMENT_CDR_EFFORT, to control the CDR 
    effort level, which sets place.coarse.cong_restruct_effort.
  - PREROUTE_PLACEMENT_CDR_EFFORT is a flow-dependent variable. Like other 
    flow-dependent variable, the value of OPTIMIZATION_FLOW determines its 
    default behavior.
  - In RM+ HC flow (when OPTIMIZATION_FLOW is set to hc), 
    PREROUTE_PLACEMENT_CDR_EFFORT is converted to ultra to enable the ultra CDR 
    effort. In other flows, medium effort (the default) is enabled.    

Updates to place_opt_example.hplp.tcl and place_opt_example.hc.tcl
* The example scripts, which run the same steps as in the RM+ hplp and hc  
  flows, are updated with the latest commands from place_opt.tcl. These can be 
  used as templates to develop your own place_opt script.

###############################################################################
Sign-off DRC and chip finish related changes
###############################################################################
Updates to settings.step.chip_finish.tcl
* Removes the signoff.create_metal_fill.flat application option, which was set 
  to true in the previous release. The default value (false) is now 
  recommended.

Updates to chip_finish.tcl
 * Removes the signoff.check_drc.always_read_fill application option, which was  
   set to true in the previous release. This application option is deprecated 
   and is no longer needed.
 * Updates the value of signoff.check_drc.fill_view_data from read to 
   read_if_uptodate.

###############################################################################
Miscellaneous changes
###############################################################################
Updates to the init_design.tcl and icc2_common_setup.tcl
* Supports library assembly flow during design library creation as optional
  - If enabled, create_lib calls library manager under the hood to generate, 
    store, and link .nlibs to the design library.
    This only impacts designs starting with ASCII or DC_ASII inputs 
    (set INIT_DESIGN_INPUT to ASCII or DC_ASCII) where design library is 
    created.
  - To enable the flow, do the following:
	1. Set LIBRARY_ASSEMBLY_FLOW to true (in icc2_common_setup.tcl)
    	2. Specify LINK_LIBRARY with the necessary .db files 
           (in icc2_common_setup.tcl)
	3. Specify REFERENCE_LIBRARY with physical source files 
           (in icc2_common_setup.tcl) 
    	4. Make sure search_path is specified with the paths to the aforementioned 
           files (in icc2_pnr_setup.tcl)
    Then in init_design.tcl, the flow is enabled during create_lib.
  - Adds a new Tcl variable, LIBRARY_ASSEMBLY_FLOW, and adds comments to the 
    existing LINK_LIBRARY and REFERENCE_LIBRARY variables to indicate the 
    desired inputs when library assembly flow is enabled.

Updates to init_design.tcl and icc2_pnr_setup.tcl
* Adds support for on-disk operation
  - Enables on-disk operation for create_lib and copy_block to save libraries 
    or blocks to disk right away
  - In init_design.tcl, lib.setting.on_disk_operation is set to true 
    (default is false).
  - In icc2_pnr_setup.tcl, design.on_disk_operation is set to true 
    (default is false) and affects all steps.

Updates to init_design.tcl and icc2_common_setup.tcl
* Adds a new variable, LIBRARY_SUFFIX, to define a suffix for the design 
  library name. In the previous release, a hard coded suffix .nlib was used as 
  part of the design library name ($DESIGN_LIBRARY). The default value of this 
  new variable is "" (unspecified).

  So now, by default, no suffix is added when a design library is created. 
  This enables you to easily distinguish whether the library is provided by 
  vendors or is created by icc2_shell (e.g. design libraries).

Updates to report_qor.nosplit.tcl and report_qor.tcl
* Adds the parallel_execute support for the selected commands
  - The scripts include examples of how parallel_execute can be used in order to 
    benefit commands that run in sequence.
* Supports the check_mv_design -erc_mode and check_mv_design -power_connectivity 
  reporting




M-2016.12-SP4 Updates
=====================
###############################################################################
PPA (performance, power, and area) related changes
###############################################################################
Updates to place_opt.tcl, clock_opt_cts.tcl, and clock_opt_opto.tcl
  * Adds GUI command (gui_write_window_image -format png) to save global
    route congestion map at the end of step. This is done in addition to the 
    existing report_congestion report.

Updates to settings.common.opt.tcl
  * Updates the scan reordering UI by replacing the set_optimize_dft_options 
    command with the opt.dft.optimize_scan_chain application option in the 
    comment  

  * Adds a comment with the opt.dft.clock_aware_scan application option to 
    support the consideration of clock drivers during DFT optimization in 
    the clock_opt final_opto phase
    This feature typically results in a scan connection structure with reduced 
    hold violations along the scan path; however, it might increase the total 
    scan net length and degrade timing.

Updates to settings.common.routing.tcl
  * Moves the setting of the route.global.timing_driven application option
    to true from settings.step.route_auto.tcl (sourced in the route_auto 
    step) to settings.common.routing.tcl (sourced in the place_opt step).

Updates to place_opt.tcl
  * Adds support for the -cells and -exclude_instance options of the 
    identify_multibit command, which allows you to control the candidates 
    for multibit banking
  * Adds support for the -cells and -exclude_instance options of the 
    split_multibit command, which allows you to control the candidates 
    for multibit debanking

Updates to settings.step.route_opt.tcl
  * Supports the route_opt concurrent clock and data optimization (CCD) flow 
    with the buffer removal capability
    The ccd.post_route_buffer_removal application option is set to true when 
    ROUTE_OPT_CCD is enabled. (ROUTE_OPT_CCD is enabled by default for the
    RM QoR and RM+ HPLP, ARLP, and HC flows.)
  * The route_opt.flow.enable_cto application option now enables route_opt 
    clock logical DRC fixing only for the non-CCD flow (ROUTE_OPT_CCD set 
    to false)
    For the CCD flow (ROUTE_OPT_CCD set to true), the route_opt command 
    automatically performs timing-driven clock logical DRC fixing.

###############################################################################
RM+ specific changes
###############################################################################
* Adds support for PREROUTE_PLACEMENT_STREAM_LEGALIZER
  For each large displacement cell, it attempts to move other cells so that a
  single very large displacement is replaced by a stream of small displacements 
  - If you select Established Node or 20nm for the Technology Node 
    configuration, the default is false, which is the same as the tool default.
  - If you select other nodes (16nm and below), it is set to true for the RM+ 
    flows.

* Adds support for PREROUTE_PLACEMENT_ORIENTATION_OPTIMIZATION
  The legalizer considers flipping the orientations of cells to reduce 
  displacements during legalization.
  - If you select Established Node or 20nm for the Technology Node 
    configuration, the default is false, which is the same as the tool default.
  - If you select other nodes (16nm and below), it is set to true for the RM+ 
    flows.

###############################################################################
PrimeRail In-Design
###############################################################################
Updates to in_design_pnr_rail_analysis.tcl
  * Supports two more integrity checks: dangling pin shapes and dangling vias

###############################################################################
Miscellaneous
###############################################################################
Updates to write_data.tcl
  * Adds flip_chip_pad_cells to the exclude list for write_verilog for 
    PrimeTime use




M-2016.12-SP2 Updates
=====================
###############################################################################
PPA (performance, power, and area) related changes
###############################################################################
Updates to place_opt.tcl
  * Adds a refine_opt command after the split_multibit command so the design 
    can be legalized and optimized after multibit debanking when this feature
    is enabled (controlled by PLACE_OPT_MULTIBIT_DEBANKING)
  * Removes the PREROUTE_PLACEMENT_CDR variable, which controls 
    congestion-driven restructuring, because the tool default is 
    now embedded 
  * Moves PLACE_OPT_TRIAL_CTS, which controls trial clock trees, from 
    settings.step.place_opt.tcl to place_opt.tcl
    It is now run before the second pass of placement starts because this 
    feature is recommended only for the second pass of placement.

Updates to settings.common.opt.tcl
  * Removes the following setting because the default value ("lazy") is now 
    recommended
      set_app_options -name power.enable_activity_persistency -value on ;# default off

Updates to settings.step.place_opt.tcl
  * Added support for place_opt concurrent clock and data optimization (CCD)
    - Adds the PLACE_OPT_CCD variable, which enables the feature by setting
      place_opt.flow.enable_ccd to true.
    - Replaces the CCD_FLOW variable with CLOCK_OPT_CCD and ROUTE_OPT_CCD, 
      which control CCD in clock_opt and route_opt, respectively.
    - PLACE_OPT_CCD, like CLOCK_OPT_CCD and ROUTE_OPT_CCD, is flow-dependent 
      and uses the OPTIMIZATION_FLOW value to determine the behavior. Unlike 
      CLOCK_OPT_CCD and ROUTE_OPT_CCD, which are enabled by default for the
      RM QoR and RM+ flows, PLACE_OPT_CCD is not enabled by default. To
      enable it, manually set the PLACE_OPT_CCD variable to true.

Updates to clock_opt_cts.tcl
  * Added support for multisource clock tree synthesis (MSCTS)
    - New variable 
      * TCL_MSCTS_SETUP_FILE 
        Specifies the MSCTS configuration script, which is sourced before 
        the clock_opt command. The RM provides two examples that you can 
        use as reference:
	- mscts_example.regular.tcl for regular MSCTS
	- mscts_example.structural.tcl for structural MSCTS

  * Scan reordering
    - Replaces opt.dft.optimize_scan_chain -value false with 
      set_optimize_dft_options -optimize_scan_chain false.
    - Updated the comments in settings.common.opt.tcl. 

Updates to route_opt.tcl
  * Added support for optional StarRC In-Design extraction and PrimeTime delay 
    calculation based route_opt step
    - This step is performed after the last route_opt is completed to improve 
      convergence on designs with lower technology nodes, low voltage, AWP, 
      or CCS libraries, etc.
    - Recommended if you are at the final design closure stage
    - New variables
      * ROUTE_OPT_WITH_STARRC_PT 
        Enables both features together; the default is false.
      * ROUTE_OPT_STARRC_CONFIG_FILE (required when feature is enabled)
        Specifies the configuration file for StarRC in-design extraction.
        See route_opt.starrc_in_design_config_example.txt for an example 
        of the configuration file.
      * ROUTE_OPT_PT_DELAY_CALC_DB_LOCATION 
        Specifies the paths to the .db files of the reference libraries.
        Required for the PrimeTime delay calculation to work properly if 
        the .db files are in a different location than the reference libraries.


###############################################################################
RM+ specific changes
###############################################################################
Updates to the RM+ hc (high connectivity) flow
  * Changes the following variable settings:

    Variable name			  	Old value	New value
    ---------------------------------------------------------------------
    PREROUTE_AREA_RECOVERY_EFFORT 	        medium 		high
    PREROUTE_POWER_OPTIMIZATION_EFFORT 	        medium		high
    PREROUTE_LAYER_OPTIMIZATION 		true		false
    PREROUTE_ROUTE_AWARE_ESTIMATION 	        false		true
    PREROUTE_BUFFER_AREA_EFFORT	 	        low		ultra
    PREROUTE_TNS_DRIVEN_PLACEMENT 	        false		true

  * Simplifies the first pass place_opt commands used in the RM+ hc 
    flow with non-SPG inputs (PLACE_OPT_SPG_FLOW is false) now that 
    the -congestion_driven_restructuring option is the tool default.
    - In the previous release:

	create_placement -congestion_driven_restructuring
	place_opt -from initial_drc -to initial_drc
	update_timing -full 
 	
    - In this release:

	place_opt -to initial_drc
	update_timing -full  	

Updates to route_auto.tcl
  * Adds global route optimization to the route_auto step as an optional 
    feature
    - New variable 
      * CLOCK_OPT_GLOBAL_ROUTE_OPT 
        Enables the feature; the default behavior depends on the 
        OPTIMIZATION_FLOW value.
        - Optional for the qor and ttr flows 
        - On-by-default for the RM+ hplp, arlp, and hc flows
        To override the flow-based behavior, set CLOCK_OPT_GLOBAL_ROUTE_OPT 
        to true or false.
   - Updated commands and settings
     * In clock_opt_opto.tcl, replaces "clock_opt -from final_opto" with 
       "clock_opt -from final_opto -to final_opto" to reflect that there
       is now a global_route_opt phase after the final_opto phase if global 
       route optimization is enabled. 
     * In route_auto.tcl, replaces route_global with "clock_opt -from 
       global_route_opt" when the feature is enabled. After this command 
       completes, the database is fully global routed and ready for track 
       assignment.
     * Enables the clock_opt.flow.enable_global_route_opt and 
       route_opt.flow.enable_power application options.
     * Activates the scenarios specified with both
       CLOCK_OPT_OPTO_ACTIVE_SCENARIO_LIST and ROUTE_AUTO_ACTIVE_SCENARIO_LIST.

Updates to settings.common.opt.tcl
  * Changes the default place_opt congestion effort (controlled by 
    PLACE_OPT_CONGESTION_EFFORT_HIGH) to high for the RM+ arlp flow
    - In the previous release, place_opt.congestion.effort was set to 
      medium for RM+ ARLP flow. 
    - In this release, it is set to high (medium is the tool default).

Updates to settings.step.clock_opt.tcl
  * Changes the default value of the power CCD feature (controlled by 
    CLOCK_OPT_POWER_RECOVERY) to auto
    - In the previous release, clock_opt.flow.enable_clock_power_recovery 
      was set to power for the RM+ flows. 
    - In this release, it is set to auto (auto is the tool default).

###############################################################################
PT-ECO related changes
###############################################################################
* Adds support for the Galaxy incremental ECO flow
  Shows an example of running the incremental ECO flow from the 
  IC Compiler II tool, to the StarRC tool, to the PrimeTime tool,
  and back to the IC Compiler II tool. The flow consists of two
  steps as represented by the two new files.

  - New files 
    * pt_eco_incremental_1.tcl as the first step
      Initializes the flow by establishing the initial design reference
      data (NDM, Verilog, DEF) for the IC Compiler II, StarRC, and 
      PrimeTime tools.
      - Runs the "record_signoff_eco_changes -init -def" command.
      - Includes the recommended settings (as comments) for running the
        StarRC tool to generate the Galaxy Parasitic Database (GPD) for
        PrimeTime use.
      - Includes the recommended settings (as comments) for running the
        PrimeTime tool to generate the IC Compiler II ECO change file.
    * pt_eco_incremental_2.tcl as the second step
      Runs the incremental ECO flow.
      - Runs the "record_signoff_eco_changes -start -input" command, 
        reads the ECO change file that was generated by the PrimeTime 
        tool in the first step, and performs legalization and ECO routing.
      - Includes the recommended settings (as comments) for running 
        the StarRC tool in incremental mode to generate the GPD for 
        PrimeTime use.
      - Includes the recommended settings (as comments) for running 
        the PrimeTime tool in incremental mode to assess the timing 
        or generate another ECO change file for subsequent iterations.
  
  Note: 
  After pt_eco_incremental_2.tcl completes, if subsequent ECO iterations 
  are required, you can repeat the same steps as in pt_eco_incremental_2.tcl.
  The steps in pt_eco_incremental_1.tcl are not needed for subsequent runs as
  they need to be run only once to initialize the flow.
 
  - New targets in Makefile_pnr 
    * pt_eco_incremental_1 
      New optional target to initialize the Galaxy incremental ECO flow.
      Runs the pt_eco_incremental_1.tcl script.
    * pt_eco_incremental_2 
      New optional target to run the Galaxy incremental ECO flow.
      pt_eco_incremental_1 is a prerequisite target.  
      Runs the pt_eco_incremental_2.tcl script.

  - The existing pt_eco target, which runs the pt_eco.tcl script
    for the classic ECO flow, is still supported.

Updates to icc2_pnr_setup.tcl
  - New variable
    * PT_ECO_INCREMENTAL_FROM_BLOCK_NAME
      Specifies the starting block for the pt_eco_incremental_1.tcl script.

###############################################################################
PrimeRail In-Design
###############################################################################
* Adds support for PrimeRail In-Design rail analysis
  - New file 
    * in_design_pnr_rail_analysis.tcl 
      This script uses PrimeRail In-Design to perform rail integrity checking.
      You control the PrimeRail In-Design functions by setting the 
      PrimeRail In-Design (PRIMERAIL_*) variables in icc2_pnr_setup.tcl
      and icc2_common_setup.tcl.
    * Performs the following rail integrity checks:
      - Floating shapes
      - Floating pin shapes
      - Discontinuous connections
      - Missing vias
  - New target in Makefile_pnr 
    * in_design_pnr_rail_analysis 
      New optional target for running PrimeRail In-Design rail analysis.
  - New variables 
    * Adds new variables with the PRIMERAIL_ prefix to icc2_pnr_setup.tcl 
      and icc2_common_setup.tcl.

###############################################################################
Miscellaneous 
###############################################################################
Updates to clock_opt_cts.tcl
  * Adds a bus routing example that includes the create_bundle, 
    create_bus_routing_style, and route_custom commands. The example
    is after the clock_opt -from route_clock -to route_clock command.

Updates to the write_data target
  * New variable 
    * WRITE_DATA_BLOCK_FROM_NAME 
      Specifies the starting block for write_data.tcl.
      - In the previous release, write_data.tcl always starts from 
        the CHIP_FINISHING_BLOCK_NAME block.
      - In this release, you can specify a different block name to 
        start it from.
  * New target in Makefile_pnr
    - write_data 
      This is now an optional standalone target. The "all" target no longer 
      runs the write_data target. You can run the write_data target after 
      the "all" target or after any other target is completed by specifying 
      the starting block name in the WRITE_DATA_BLOCK_FROM_NAME variable.
  * Adds the "report_names -rules verilog" and "change_names -rules verilog 
    -hierarchy" commands before the save_block command.
  * Adds suggestions about how to check and deal with port name changes

Updates to report_qor.nosplit.tcl/report_qor.tcl
  * Zero interconnect reporting
    - Zero interconnect reporting is done in addition to regular reporting 
      for the init_design step 
    - Added "set_app_options -name time.high_fanout_net_pin_capacitance 
      -value "0pF" and "set_app_options -name time.high_fanout_net_threshold 
      -value "100" to ignore the pin capacitance from high-fanout nets.
      These two settings are set temporarily and do not override the
      user's settings. 
  
  * Added support of a script to generate a summary at the end of flow
    - New file 
      * summary.tcl 
        Generates a summary report at the end of the flow.
    - New target in Makefile_pnr
      * summary 
        New optional target in the utility section of Makefile_pnr.
  
New place_opt example scripts
  * New files
    - place_opt_example.hplp.tcl 
      Provides an example that runs the same steps as the RM+ hplp and 
      arlp flows.
    - place_opt_example.hc.tcl
      Provides an example that runs the same steps as the RM+ hc flow.
    You can use these scripts as a starting point for further customizations. 
    To use a customization script, specify the script name with the
    TCL_USER_PLACE_OPT_SCRIPT variable. When this variable is set, 
    place_opt.tcl sources the specified script instead of running 
    the standard place_opt commands.

Changes to side file names
  * Updated the naming convention for the side files for better consistency 
    across the RM

  - Side files for SG 16nm:

    Old Name                                            New Name
    --------------------------------------------------------------------------- 
    init_design.tcl.sg_16nm.1 				init_design.tcl.sg_16nm.boundary_cells
    init_design.create_pg_example.hs.tcl.sg_16nm 	init_design.tcl.sg_16nm.create_pg_example.hs
    init_design.create_pg_example.hd.tcl.sg_16nm 	init_design.tcl.sg_16nm.create_pg_example.hd
    init_design.create_pg_example.uhd.tcl.sg_16nm 	init_design.tcl.sg_16nm.create_pg_example.uhd
    settings.common.opt.dont_use.tcl.sg_16nm 		settings.common.opt.tcl.sg_16nm.dont_use
    route_opt.via_stitching_example.tcl.sg_16nm 	route_opt.tcl.sg_16nm.via_stitching_example
    settings.common.cts.ndr_example.leaf.tcl.sg_16nm 	settings.common.cts.tcl.sg_16nm.ndr_example.leaf
    settings.common.cts.ndr_example.trunk.tcl.sg_16nm 	settings.common.cts.tcl.sg_16nm.ndr_example.trunk
    settings.common.opt.place_spacing_rules.tcl.sg_16nm settings.common.opt.tcl.sg_16nm.place_spacing_rules


M-2016.12 Updates
=====================

###############################################################################
PPA (performance, power, and area) related changes 
###############################################################################
Updates to settings.common.opt.tcl
  * Adds support for SCANDEF checking control before coarse placement
    When the checking is enabled, if the design contains scan flip-flops but 
    no SCANDEF is loaded, coarse placement is not performed.
    - Controlled by the new PLACE_OPT_CONTINUE_ON_MISSING_SCANDEF variable,
      which sets the place.coarse.continue_on_missing_scandef application 
      option. 
    - The ICC2-RM default is false, which means SCANDEF checking before coarse 
      placement is enabled. This is the same as the IC Compiler II default.

  * Adds support for automatic density control for the coarse placement
    - Controlled by the new PREROUTE_PLACEMENT_AUTO_DENSITY variable, which 
      sets the place.coarse.auto_density_control application option to enable 
      the coarse placer to use a higher cell density in areas where it does 
      not create routing congestion.
    - The ICC2-RM default is true, which is the same as the IC Compiler II 
      default.

  * Updates the default placement maximum density for the RM+ flows
    - The existing PREROUTE_PLACEMENT_MAX_DENSITY variable sets the
      place.coarse.max_density application option to limit the local 
      density to be less than the specified value.
    - In previous releases, PREROUTE_PLACEMENT_MAX_DENSITY is set to 0.7
      for the hplp and arlp RM+ flows and is set to 0.5 for hc RM+ flow.
    - In this release, the default is unspecified in the RM+ flows, which
      means that the place.coarse.max_density application option is set 
      to the tool default of 0.  
    - When PREROUTE_PLACEMENT_MAX_DENSITY is used with 
      PREROUTE_PLACEMENT_AUTO_DENSITY,
      - If PREROUTE_PLACEMENT_AUTO_DENSITY is true, the tool automatically 
        determines an appropriate cell density value
      - If PREROUTE_PLACEMENT_AUTO_DENSITY is false, the tool tries to spread 
        the cells evenly

  * Enables placement preclustering by default
    - The existing PREROUTE_PLACEMENT_PRECLUSTER variable sets the 
      place.coarse.precluster application option to enable preclustering 
      during coarse placement.
    - In previous releases, the default was false, which is the same as the
      tool default in version L-2016.03-SP4.
    - In this release, the default is changed to true to match the tool 
      default in version M-2016.12.

Updates to place_opt.tcl
  * For the QoR, HPLP, and ARLP flows, adds the -congestion option to the 
    create_placement command.
  * For the HPLP and HC flows, removes the -effort high option from the 
    create_placement command because this is now the tool default.
  * The updated create_placement commands used in place_opt.tcl are
    - QoR, HPLP, and ARLP flows
         create_placement -use_seed_locs -timing_driven -congestion
    - HC flow 		 
         create_placement -use_seed_locs -timing_driven -congestion \
            -congestion_effort high

Updates to clock_opt_opto.tcl
  * Removes the route_group -all_clock_nets command and adds comments to 
    suggest usage. 
    - In previous releases, this command was run after running the 
      clock_opt -from final_opto command.
    - Starting with version M-2016.12, clock route patching is embedded in
      the clock_opt final_opto phase so this is no longer needed.
    - However, if you manually add a refine_opt command after clock_opt, you 
      still need to run the route_group command to patch the clock routes.
      For example,
	  refine_opt
	  route_group -all_clock_nets 

Updates to settings.step.clock_opt_cts.tcl and settings.step.route_opt.tcl
  * Adds support for power or area recovery from clock cells and registers 
    during clock_opt or route_opt
    - Adds the CLOCK_OPT_POWER_RECOVERY variable, which sets the
      clock_opt.flow.enable_clock_power_recovery application option to power 
      in settings.step.clock_opt_cts.tcl. This setting is applied before the 
      clock_opt -from build_clock -to route_clock command. 
    - Adds the ROUTE_OPT_POWER_RECOVERY variable, which sets the
      route_opt.flow.enable_clock_power_recovery application option to power 
      in and settings.step.route_opt.tcl. This setting is applied before the 
      route_opt command.
    - By default, the CLOCK_OPT_POWER_RECOVERY and ROUTE_OPT_POWER_RECOVERY 
      variables are set to OPTIMIZATION_FLOW by default, which means that the 
      value of OPTIMIZATION_FLOW determines whether they are enabled.  
      * For the RM+ HPLP and ARLP flows, the corresponding application options 
        are set to power, meaning that power recovery is enabled in clock_opt 
        and route_opt. To disable power recovery in these flows, set the 
        CLOCK_OPT_POWER_RECOVERY or ROUTE_OPT_POWER_RECOVERY to none. To focus
        on area instead of power, set these variables to area.
      * For the other flows, both application options remain at the tool 
        default of none.

###############################################################################
Routing and chip-finishing related changes (chip_finish.tcl)
###############################################################################
* The script now sorts the cell lists in CHIP_FINISH_METAL_FILLER_LIB_CELL_LIST
  and CHIP_FINISH_NON_METAL_FILLER_LIB_CELL_LIST in descending order before 
  they are used by the create_stdcell_filler commands. 

###############################################################################
PrimeTime ECO related changes (pt_eco.tcl)
###############################################################################
* Updates the existing non-freeze-silicon PrimeTime ECO ECO flow and adds
  support for the freeze-silicon PrimeTime ECO flow
  - Select the flow by setting the new PT_ECO_MODE variable to one of
    the following values:
    * default: Runs the non-freeze-silicon flow, which sources 
      $PT_ECO_CHANGE_FILE and runs the place_eco_cells command in 
      minimum-physical-impact mode
    * freeze_silicon: Runs the freeze-silicon flow which runs the
      add_spare_cells and place_eco_cells commands, sources 
      $PT_ECO_CHANGE_FILE, and runs the place_freeze_silicon command.

  - The following changes apply to the non-freeze-silicon flow:
    * The place_eco_cells command now supports the -remove_filler_references 
      option. This option reuses the CHIP_FINISH_METAL_FILLER_LIB_CELL_LIST 
      and CHIP_FINISH_NON_METAL_FILLER_LIB_CELL_LIST variables from the 
      chip_finish step. 

  - The following changes apply to the freeze-silicon flow:
    * The add_spare_cells command uses the new PT_ECO_SPARE_CELL_PREFIX 
      variable to specify the spare cell prefix and the new 
      PT_ECO_SPARE_CELL_REF_NUM_LIST variable to specify a list of spare 
      cell library cell name and instance count pairs.

* Adds support to reinsert filler cells in the changed area after 
  PrimeTime ECO
  - The filler cell insertion reuses the following variables from the 
    chip_finish step: CHIP_FINISH_METAL_FILLER_LIB_CELL_LIST, 
    CHIP_FINISH_METAL_FILLER_PREFIX, CHIP_FINISH_NON_METAL_FILLER_LIB_CELL_LIST,
    and CHIP_FINISH_NON_METAL_FILLER_PREFIX

* Adds comments to enable incremental metal fill insertion in the changed area
  - The comments note that you should append the -auto_eco true option to the 
    signoff_create_metal_fill command   

###############################################################################
Ease-of-use related changes 
###############################################################################
* Updates to init_design.tcl
  - Replaces the read_def -allow_cell_creation option with the 
    -add_def_only_objects cells option.

* Updates to place_opt.tcl, clock_opt_cts.tcl, and clock_opt_opto.tcl
  - Replaces the route_global -congestion_map_only command with the
    report_congestion -layers command to generate the congestion report
    at the end of the preroute steps (place_opt, clock_opt_cts, and 
    clock_opt_opto).

* Updates to clock_opt_opto.tcl
  - Adds clock propagation and I/O latency computation at the beginning of
    the clock_opt_opto step if CLOCK_OPT_OPTO_ACTIVE_SCENARIO_LIST is 
    specified. 
  - The scenarios specified in the CLOCK_OPT_OPTO_ACTIVE_SCENARIO_LIST
    variable likely differ from the active scenarios during clock_opt_cts.
    To ensure that clocks are propagated and I/O latencies are properly 
    updated, script runs the following two commands:
	synthesize_clock_trees -propagate_only
	compute_clock_latency

###############################################################################
Technology node specific updates 
###############################################################################
* Updates the technology node specific legalization settings in the following
  scripts:
  - settings.common.opt.tcl (16nm-specific changes appear if you select 
    16/14nm for the Technology Node option on SolvNet RMgen)
  - settings.common.opt.tcl.10nm_t.1 (Due to NDA protection, this script is 
    available as a separate download through your application consultant, as 
    mentioned on the RMgen page)
  - settings.common.opt.tcl.10nm_s.1 (Due to NDA protection, this script is 
    available as a separate download through your application consultant, as 
    mentioned on the RMgen page)
 
###############################################################################
Synopsys logic library support
###############################################################################
* Renames route_opt.via_stitching_example.uhd.tcl.sg_16nm to
  route_opt.via_stitching_example.tcl.sg_16nm. This script now supports both
  the uhd and hd SYNOPSYS_LOGIC_LIBRARY_MODE.  

* Removes clock_opt_opto.dont_use.tcl.sg_16nm because it now has the same
  contents as settings.common.opt.dont_use.tcl.sg_16nm

* Updates the command syntax and library cell names for the following scripts:
  - init_design.create_pg_example.hd.tcl.sg_16nm*
  - init_design.create_pg_example.hs.tcl.sg_16nm*
  - init_design.create_pg_example.uhd.tcl.sg_16nm*
  - settings.common.opt.dont_use.tcl.sg_16nm
  - settings.common.opt.place_spacing_rules.tcl.sg_16nm


L-2016.03-SP4 Updates
=====================

###############################################################################
Updates to init_design.tcl 
###############################################################################
* Power derating factors  
  Added set_power_derate examples as comments, which can be used to affect 
  power analysis and power optimization. (init_design.tcl)

* Added support for write_floorplan generated Tcl files as floorplan input.
  RM now supports the following floorplan creation inputs, in the order of 
  precedence:
  1. DEF_FLOORPLAN_FILES
     Reads the floorplan from the specified DEF files. You can specify 
     multiple DEF files; if any file is invalid, the RM issues an error 
     message and skips the read_def command. 
  2. TCL_FLOORPLAN_FILE
     Reads the floorplan from the Tcl file written by the write_floorplan 
     command. If the file is invalid, the RM issues an error message and
     does not source the file.
  3. initialize_floorplan
     If you do not specify the DEF_FLOORPLAN_FILES or TCL_FLOORPLAN_FILE 
     variable, the RM runs the initialize_floorplan command.
  4. TCL_ADDITIONAL_FLOORPLAN_FILE
     This variable specifies a Tcl script file that contains additional
     floorplan commands. If specified, this script is sourced after creating 
     the floorplan using DEF files (method 1), a Tcl floorplan file (method 2),
     or the initialize_floorplan command (method 3).

###############################################################################
Updates to settings.common.*.tcl 
###############################################################################
* settings.common.opt.tcl
  - Removed the comment that the placement spacing label is not persistent 
    and has to be applied in each session (this setting is now persistently 
    stored in the design library).

  - Moved the library cell purpose restriction commands (set_lib_cell_purpose) 
    to a standalone script, set_lib_cell_purpose.tcl, which is run by default. 
    This script includes the following library cell purpose restrictions:
    * Don't use, which is controlled by the new TCL_LIB_CELL_DONT_USE_FILE
      variable
    * Hold fixing, which is controlled by the HOLD_FIX_LIB_CELL_PATTERN_LIST
      variable
    * Clock tree synthesis, which is controlled by the 
      CTS_LIB_CELL_PATTERN_LIST variable
    * Clock tree synthesis only, which is controlled by the 
      CTS_ONLY_LIB_CELL_PATTERN_LIST variable

    To replace the set_lib_cell_purpose.tcl script with your own customized 
    script, specify the script file with the TCL_LIB_CELL_PURPOSE_FILE variable.

  - Added a new variable, PREROUTE_PLACEMENT_MAX_UTIL, to specify the 
    maximum design utilization after congestion-driven padding during 
    congestion-driven placement. This variable sets the 
    place.coarse.congestion_driven_max_util application option.

  - Added a new variable, PREROUTE_PLACEMENT_PRECLUSTER, to enable coarse placement
    preclustering. This variable sets the place.coarse.precluster application option.

* settings.common.routing.tcl
  - Removed the route.common.report_local_double_pattern_odd_cycles 
    application option as it is deprecated. The IC Compiler II tool
    now automatically enables this setting if the design requires it.

###############################################################################
Updates to place_opt.tcl 
###############################################################################
* place_opt.tcl
  - Added support for multibit banking and debanking during place_opt to all 
    flows except the TTR flow (OPTIMIZATION_FLOW set to ttr). 
    * Banking is controlled by the PLACE_OPT_MULTIBIT_BANKING variable. 
      When banking is enabled, the RM runs the "identify_multibit -register 
      -no_dft_opt -apply" command after the initial_opto phase of place_opt.
    * Debanking is controlled by the PLACE_OPT_MULTIBIT_DEBANKING variable.
      When debanking is enabled, the RM runs the "split_multibit 
      -slack_threshold 0" command after the place_opt command completes.
  - "route_global -congestion_map_only true" command is now controllable 
    through the new variable, REPORT_QOR_REPORT_CONGESTION

* settings.step.place_opt.tcl
  - Added a new variable, PLACE_OPT_REFINE_OPT_EFFORT_HIGH, to enable 
    high-effort placement during refine_opt. This variable sets the 
    refine_opt.place.effort application option to high.

###############################################################################
Updates to clock_opt_cts.tcl and clock_opt_opto.tcl 
###############################################################################
* Added a comment to show how to enable congestion aware NDR promotion for SI prevention 
  at CTS in a non-CCD flow. In CCD flow, this is enabled by default.

* Added the ability to replace the core commands performed in either
  clock_opt_cts.tcl or clock_opt_opto.tcl.
  - To replace the core commands in clock_opt_cts.tcl, specify the
    replacement script file with the TCL_USER_CLOCK_OPT_CTS_SCRIPT variable.
  - To replace the core commands in clock_opt_opto.tcl, specify the
    replacement script file with the TCL_USER_CLOCK_OPT_OPT_SCRIPT variable.

* Added global route congestion map reporting with the 
  "route_global -congestion_map_only true" command at the end of both scripts,
  controlled by the new variable, REPORT_QOR_REPORT_CONGESTION.

###############################################################################
Updates to route_auto.tcl and settings.step.route_auto.tcl 
###############################################################################
* Added the route.detail.insert_redundant_vias_layer_order_low_to_high 
  application as a comment in settings.step.route_auto.tcl.
  This application option enables insertion of redundant vias in the 
  lower layers first followed by the higher layers. This feature can
  increase the redundant via insertion rates on double-patterning
  layers for some designs.

* Added the ability to replace the core commands performed in route_auto.tcl.
  To replace the core commands, specify the replacement script file with
  the TCL_USER_ROUTE_AUTO_SCRIPT variable.

###############################################################################
Updates to route_opt.tcl and settings.step.route_opt.tcl 
###############################################################################
* Added the route.detail.eco_route_use_soft_spacing_for_timing_optimization 
  application option as a comment in route_opt.tcl.
  This application option disables soft-rule-based timing optimization 
  in ECO routing. This can be useful to limit spreading, which can touch 
  multiple routes and impact convergence. 

* Added an application option as a comment in settings.step.route_opt.tcl to
  enable CCS waveform analysis (AWP).
  AWP requires libraries that contain CCS timing and CCS noise data. It is
  recommended for postroute timing analysis.

###############################################################################
Updates to chip_finish.tcl and settings.step.chip_finish.tcl
###############################################################################
* Disabled soft-rule-based timing optimization in ECO routing during chip 
  finishing in settings.step.chip_finish.tcl. 
  This can be useful to limit spreading which can touch multiple routes and 
  impact convergence.

* Added a new option, -smallest_cell_size, to the create_stdcell_filler 
  command in chip_finish.tcl.
  This option is used to prevent gaps during filler cell insertion.

     #  For designs with a smallest cell size of 2 sites, to prevent 1x gaps,
     #  append either the option -smallest_cell_size 2 or -rules {no_1x}
     #  For designs with a smallest cell size of 3 sites, to prevent 1x and 
     #  2x gaps, append the option -smallest_cell_size 3

* Added support for ALF format electromigration constraints and signal
  electromigration fixing in chip_finish.tcl.
  - To specify the format of the signal electromigration constraints, set 
    the new CHIP_FINISH_SIGNAL_EM_CONSTRAINT_FORMAT variable. Valid values 
    are ITF or ALF.
  - To enable signal electromigration analysis and fixing, specify the new 
    variable CHIP_FINISH_SIGNAL_EM_SCENARIO with an active scenario which is
    enabled for setup and hold analysis (the default is unspecified).
  - To enable signal electromigration fixing, set the new 
    CHIP_FINISH_SIGNAL_EM_FIXING variable to true (the default is false).

###############################################################################
Updates to report_qor.tcl
###############################################################################
* Added local skew reporting to the report_clock_qor commands if any of
  the cts.compile.enable_local_skew, cts.optimize.enable_local_skew, or 
  clock_opt.flow.enable_ccd application options is enabled.

* Added report_user_units reporting

* Enabled power reporting (report_power) for the HPLP or ARLP flows 
  (OPTIMIZATION_FLOW set to hplp or arlp), regardless of the setting of 
  the REPORT_QOR_REPORT_POWER variable.

* Added support for analyze_design_violations -stage postroute for the
  route_opt stage

* Changed the reporting at the end of the init_design stage so that regular 
  reporting is performed first, followed by zero-interconnect reporting,
  so that you get both reports.

* Changed the reporting at the end of the route_auto stage so that regular 
  reporting is performed first, followed by non-SI reporting,
  so that you get both reports.

* The default for REPORT_QOR_SCRIPT has been changed to report_qor.nosplit.tcl.
  Previously it was report_qor.tcl.

###############################################################################
Synopsys DesignWare logic library support
###############################################################################
* Added support for "Synopsys logic libraries" for designs that use the TSMC 
  16nm FinFET C (16FFC) process.
  On the SolvNet RMgen page, when you select 16/14nm for the "Technology Node", 
  the "Synopsys logic libraries" option appears. If you select TRUE for the 
  "Synopsys logic libraries" option, the download scripts contain 
  "Synopsys logic libraries" customizations, which include the following 
  new files and examples to facilitate the required customizations:
  - init_design.tcl.sg_16nm.1, which is the boundary cell list specific to
    the "Synopsys logic libraries" 
  - settings.common.cts.ndr_example.leaf.tcl.sg_16nm*, which defines nondefault
    routing rules specific to the "Synopsys logic libraries" 
  - settings.common.cts.ndr_example.trunk.tcl.sg_16nm*, which defines nondefault
    routing rules specific to the "Synopsys logic libraries"
  - clock_opt_opto.dont_use.tcl.sg_16nm, which specifies the don't use 
    library cell list for clock_opt_opto specific to the "Synopsys logic 
    libraries"
  - settings.common.opt.dont_use.tcl.sg_16nm, which specifies the don't use
    library cell list for the whole flow specific to the "Synopsys logic 
    libraries"
  - settings.common.opt.place_spacing_rules.tcl.sg_16nm*, which specifies
    the spacing rules specific to the "Synopsys logic libraries" 
  - init_design.create_pg_example.hs.tcl.sg_16nm*, which provides a PG
    example for the high-speed (HS) library
  - init_design.create_pg_example.hd.tcl.sg_16nm*, which provides a PG
    example for the high-density (HD) library
  - init_design.create_pg_example.uhd.tcl.sg_16nm*, which provides a PG
    example for the ultra-high-density (UHD) library
  - route_opt.via_stitching_example.uhd.tcl.sg_16nm*, which provides a
    via-stitching example for the UHD library

* Added a new variable, SYNOPSYS_LOGIC_LIBRARY_MODE, to select the type of 
  Synopsys library in your design.
  The library types include high speed (10.5T, hs), high density (9T, hd), 
  and ultra high density (7.5T, uhd) libraries. Your selection impacts the 
  list of don't use library cells and PG creation in the flow.

###############################################################################
Ease-of-use updates
###############################################################################
* You can now activate all scenarios defined in the design for a specific 
  stage by specifying "rm_activate_all_scenarios" instead of a scenario name 
  for the following variables: PLACE_OPT_ACTIVE_SCENARIO_LIST,
  CLOCK_OPT_CTS_ACTIVE_SCENARIO_LIST, CLOCK_OPT_OPTO_ACTIVE_SCENARIO_LIST,
  ROUTE_AUTO_ACTIVE_SCENARIO_LIST, ROUTE_OPT_ACTIVE_SCENARIO_LIST,
  SIGNOFF_DRC_ACTIVE_SCENARIO_LIST, CHIP_FINISH_ACTIVE_SCENARIO_LIST,
  and PT_ECO_ACTIVE_SCENARIO_LIST


L-2016.03-SP2 Updates
=====================

###############################################################################
Updates for OPTIMIZATION_FLOW supported flows 
###############################################################################
1. In L-2016.03 release, the Tcl variable OPTIMIZATION_FLOW in icc2_pnr_setup.tcl supports two flows, 
   ttr and qor.
   - ttr - for early netlist pipe-cleaning with minimum high effort settings 
   - qor - starting point when your netlist is more finalized;
           it enables more nondefault QoR oriented but more run time intensive settings.

2. In this release, 3 additional application specific flows (RM+ flows in short) are introduced,
   in addition to the existing ttr and qor flows. So there are now 5 flows in total. 
   You can easily switch among the 5 flows by setting the OPTIMIZATION_FLOW Tcl variable.
   The 3 RM+ flows enable additional features for application specific goals and are expected to be more run time 
   intensive than the qor flow.

   - hplp - targeting at high-performance (frequency) low power design styles. 
     For example, the following features/settings are enabled, among others :
     * PREROUTE_TNS_DRIVEN_PLACEMENT (place.coarse.tns_driven_placement) is set to true
     * PLACE_OPT_DO_PATH_OPT (place_opt.flow.do_path_opt) is set to true 
     * -effort high is used in the second create_placement of the two pass place_opt flow

   - arlp - targeting at area-reduction focused low power design styles
     For example, the following features/settings are enabled, among others :
     * PREROUTE_AREA_RECOVERY_EFFORT (opt.area.effort) is set to ultra 
     * PREROUTE_ROUTE_AWARE_ESTIMATION (opt.common.use_route_aware_estimation) is set to true

   - hc - targeting at high-connectivity design styles
     For example, the following features/settings are enabled, among others : 
     * CDR (congestion driven restructuring in place_opt)
     * PREROUTE_PLACEMENT_MAX_DENSITY (place.coarse.max_density) is set to 0.5 
     * PREROUTE_PLACEMENT_TARGET_ROUTING_DENSITY (place.coarse.target_routing_density) is set to 0.6 

3. For all the features (i.e. Tcl variables) which are flow dependent (i.e. Tcl variable OPTIMIZATION_FLOW), 
   the usage has been simplified. In icc2_pnr_setup.tcl, these Tcl variables are by default tied to the value of 
   OPTIMIZATION_FLOW, while allowing you to overwrite them.

   Take PREROUTE_ROUTE_AWARE_ESTIMATION in icc2_pnr_setup.tcl as an example:

	set PREROUTE_ROUTE_AWARE_ESTIMATION $OPTIMIZATION_FLOW ;# $OPTIMIZATION_FLOW|false|true;	
		;# sets opt.common.use_route_aware_estimation to true to use layer-aware parasitics; 
		;# value of $OPTIMIZATION_FLOW will be converted: ttr:false|qor:false|hplp:true|arlp:true|hc:false
		
   From the above, the default value of PREROUTE_ROUTE_AWARE_ESTIMATION is tied to the value of OPTIMIZATION_FLOW, 
   which could be ttr, qor, hplp, arlp, or hc. (default is qor)

   If OPTIMIZATION_FLOW is set to qor, PREROUTE_ROUTE_AWARE_ESTIMATION will inherit qor.
   In the actual script, settings.common.opt.tcl, where PREROUTE_ROUTE_AWARE_ESTIMATION takes effect, 
   the value qor will be converted to false, meaning opt.common.use_route_aware_estimation is set to false,
   and the feature is disabled.

   Similarly, if you set OPTIMIZATION_FLOW to hplp, PREROUTE_ROUTE_AWARE_ESTIMATION will inherit hplp.
   Once RM runs, hplp will be converted to true when the actual script settings.common.opt.tcl is sourced, 
   meaning opt.common.use_route_aware_estimation is set to true and the feature is enabled.

   If you'd like to overwrite PREROUTE_ROUTE_AWARE_ESTIMATION's default regardless which flow you are in,
   you can set it manually to false or true, and then it won't get the value from $OPTIMIZATION_FLOW.

   For the details of the differences among the 5 flows, please refer to the training slides.

###############################################################################
Updates for AOCV and POCV in the flow 
###############################################################################
1. Updates for the AOCV
   OCVM_CORNER_TABLE_MAPPING_LIST, defined in icc2_setup.tcl, is renamed to AOCV_CORNER_TABLE_MAPPING_LIST,
   which is for AOCV only. This is to differentiate from the newly supported POCV variable,
   POCV_CORNER_FILE_MAPPING_LIST, also defined in icc2_setup.tcl. 
   AOCV_CORNER_TABLE_MAPPING_LIST and POCV_CORNER_FILE_MAPPING_LIST are mutually exclusive.

   AOCV_CORNER_TABLE_MAPPING_LIST now allows you to specify multiple tables for the same corner.
   For example, set AOCV_CORNER_TABLE_MAPPING_LIST "{corner1 table1a} {corner1 table1b} {corner2 table2}"
   In the example, table1a and table1b will be loaded for the same corner1, one by one, 
   while table2 will be loaded for corner2.

2. Added support for POCV
   Read POCV coefficient data and distance-based derate tables to reduce pessimism and improve accuracy of the results
   POCV data can come from two different formats: file based or library based (LVF). 

   (a) For library based (LVF) POCV: 
   - In init_design.tcl, RM checks for existence of LVF by running "report_ocvm -type pocvm -nosplit -lib_cell -list_annotated"
     and checks the report for key word "LVF". If existing, then script enables POCV by setting time.pocvm_enable_analysis to true.

   (b) For file based POCV:
   - Even if your design has library based POCV, you can still specify file based POCV to supplement or overwrite existing POCV data.
 
   - Use the new variable, POCV_CORNER_FILE_MAPPING_LIST, to specify a list of corner and its associated POCV file in pairs, 
     as POCV is corner dependent.

     The associated POCV file can contain either POCV coefficient data or distance-based derate tables.
     Each corner can have multiple corresponding files, which will be read one by one for that corner.
     For example: set POCV_CORNER_FILE_MAPPING_LIST "{corner1 file1a} {corner1 file1b} {corner2 file2}";
     In the example, file1a and file1b will be loaded for corner1, one by one, while file2 will be loaded for corner2.

   - In init_design.tcl, if POCV_CORNER_FILE_MAPPING_LIST is specified, POCV is enabled with 
     time.pocvm_enable_analysis set to true.

   If either (a) or (b) is satisfied and time.pocvm_enable_analysis is enabled, 
   -variation is added to the report_timing command.

   Note that AOCV is still supported through AOCV_CORNER_TABLE_MAPPING_LIST,
   however now POCV takes precedence over AOCV:
   - In init_design.tcl, if RM detects the existence of library based POCV (LVF) or if POCV_CORNER_FILE_MAPPING_LIST is specified,
     time.pocvm_enable_analysis is set to true and time.aocvm_enable_analysis is reset to false.
     In either case, AOCV_CORNER_TABLE_MAPPING_LIST won't take effect even if specified, as RM assumes intention is to enable POCV. 
     This is to avoid conflict in the situation that both POCV and AOCV are provided.
   - Only if AOCV_CORNER_TABLE_MAPPING_LIST is specified and if script doesn't detect LVF nor is POCV_CORNER_FILE_MAPPING_LIST specified,
     then AOCV_CORNER_TABLE_MAPPING_LIST will take effect in init_design.tcl and time.aocvm_enable_analysis set to true in 
     clock_opt_cts.tcl.

###############################################################################
Updates for mcmm_example.explicit.tcl and mcmm_example.auto_expanded.tcl 
###############################################################################
* The loading of TLUPlus files through the read_parasitic_tech command, which used to be in 
   mcmm_example.explicit.tcl and mcmm_example.auto_expanded.tcl (both are RM provided examples
   for TCL_MCMM_SETUP_FILE variable), is now removed.

   It is now moved to a newly created example file: read_parasitic_tech_example.tcl.
   This is to allow user to separate loading of TLUPlus files from the MCMM setup,
   as in some cases, such as design planning timing ruler, it is required.

   Specify your customized TLUPlus loading script or leverage RM's provided read_parasitic_tech_example.tcl
   by specifying the new TCL_PARASITIC_SETUP_FILE variable in the icc2_common_setup.tcl.
   Once specified, it will be sourced before TCL_MCMM_SETUP_FILE is sourced.    

###############################################################################
Updates for settings.common.opt.tcl 
###############################################################################
1. Added support for TNS-driven placement in preroute flows.
   The new variable PREROUTE_TNS_DRIVEN_PLACEMENT is added to icc2_pnr_setup.tcl,
   which controls the place.coarse.tns_driven_placement application option in settings.common.opt.tcl

2. Default of PREROUTE_POWER_OPTIMIZATION_MODE for qor flow (OPTIMIZATION_FLOW set to qor) is changed to
   total from leakage.

3. Added support for GR-based layer binning for preroute flows.
   The new variable PREROUTE_ROUTE_AWARE_ESTIMATION is added to icc2_pnr_setup.tcl,
   which controls the opt.common.use_route_aware_estimation application option in settings.common.opt.tcl

###############################################################################
Updates for settings.common.non_persistent.tcl 
###############################################################################
1. Removed the "Placement spacing labels and rules" section as it is now persistent.
   Move the section instead to the settings.common.opt.tcl

2. Removed the "read_saif" section as SAIF information is now persistent
   if the app option power.enable_activity_persistency is set to on.
   
###############################################################################
Updates for settings.common.opt.tcl 
###############################################################################
1. "Placement spacing labels and rules" is moved from settings.common.non_persistent.tcl
   to this script.

2. "set_app_options -name opt.common.do_physical_checks -value legalize" is removed,
   as tool default is now legalize.

3. "power.enable_activity_persistency" is set to on for switching activity persistency.

###############################################################################
Updates for settings.step.place_opt.tcl 
###############################################################################
* place_opt.flow.do_spg is reset if PLACE_OPT_SPG_FLOW is set to true,
  and if OPTIMIZATION_FLOW is set to flows other than ttr.

  For all the flows supported by OPTIMIZATION_FLOW, only TTR is using the place_opt.flow.do_spg
  app option for handling SPG inputs with place_opt command. 
  All the other flows are using atomic commands such as "create_placement -use_seed_locs" and 
  "place_opt -from initial_drc" commands. To prevent place_opt.flow.do_spg from accidentally being set and 
  making initial_drc phase skipped during "place_opt -from initial_drc" for the non-TTR flows,
  place_opt.flow.do_spg is reset to false for non-TTR flows.

###############################################################################
Updates for route_auto.tcl 
###############################################################################
1. The route_auto command is replaced by atomic commands which includes,
   route_global, route_track, and route_detail, which allows the user to inspect the
   global route congestion first before proceeding to the detail route. 

2. The "check_route -antenna true" command is now removed
   check_route will be performed, which by default includes antenna checking,
   in report_qor.tcl.

###############################################################################
Updates for route_opto.tcl 
###############################################################################
1 The last route_opt is now size only to minimize disturbance to the design.
  route_opt.flow.size_only_mode is set to equal_or_smaller.
  Modify it to use other size_only modes such as footprint or equal depending on your library models

2 Added targeted endpoint optimization examples

###############################################################################
Updates for chip_finish.tcl 
###############################################################################
* read_signal_em_constraints option -itf_em has been replaced by -format ITF.     


L-2016.03 Updates
=================
###############################################################################
Reference methodology structure changes
###############################################################################

1. Consolidated the IC Compiler(TM) II Top-Level Closure Reference 
   Methodology with the IC Compiler(TM) II Flat Reference Methodology
   for a more streamlined user experience. 

   - The IC Compiler(TM) II Top-Level Closure Reference Methodology is
     renamed the IC Compiler(TM) II Hierarchical Place and Route Reference 
     Methodology, and targets the hierarchical place and route flow. 
      
   - The IC Compiler(TM) II Flat Reference Methodology is renamed the 
     IC Compiler(TM) II Flat Place and Route Reference Methodology, 
     and targets the flat place and route flow.
 
   The following changes are made due to the consolidation:

   - Renamed the rm_icc2_flat_scripts directory to rm_icc2_pnr_scripts, 
     as it is now shared by both the flat and hierarchical place and 
     route flows.
   
   - Removed the rm_icc2_tlc_scripts directory and consolidated its 
     scripts in the rm_icc2_pnr_scripts directory.   
     * output_for_etm.tcl is renamed as write_data_for_etm.tcl
     * Removed init_top_design.tcl and included the needed steps in the
       init_design.tcl
     * Removed the copy_design_libs.tcl file and included its steps in the
       rm_icc2_pnr_scripts/import_from_dp.tcl and rm_icc2_pnr_scripts/create_softlinks_to_subblocks.tcl files
     * Removed the common_settings_for_tlc.tcl file and included the needed
       settings in the settings.*.tcl files

   - Renamed the icc2_flat_setup.tcl script in the rm_setup directory to 
     icc2_pnr_setup.tcl and updated all relevant scripts with new names.
   
   - Removed the icc2_tlc_setup.tcl script and added its variables to 
     a "Hierarchical PNR Variables" section near the bottom of the
     icc2_pnr_setup.tcl script. 
   
   - Renamed the Makefile_flat file in the rm_setup directory to 
     Makefile_pnr and updated it with the new names.
   
   - Removed the Makefile_tlc file and added its steps to the 
     Makefile_pnr file. 

2. Renamed the common_settings_for_*.tcl scripts to settings.*.tcl to better 
   match the function and commonality of the settings in the scripts:
  
   - Scripts that can be applied in multiple steps across the flow use the 
     settings.common.*.tcl naming convention.

   - Step-specific scripts use the settings.step.*.tcl naming convention.

   The settings in existing scripts have been moved to the appropriate
   common or step-specific scripts, as described in the following list:

   - common_non_persistent_settings.tcl

     * Moved the general non-persistent settings to 
       settings.common.non_persistent.tcl, which is sourced in every 
       implementation script.

   - common_settings_for_all.tcl 
     
     * Moved  the common optimization, coarse placement, and library cell 
       purpose settings that are used across the flow to 
       settings.common.opt.tcl.

   - common_settings_for_place_opt.tcl

     * Moved the settings that are specific to the place_opt step to
       settings.step.place_opt.tcl, which is sourced in place_opt.tcl.

   - common_settings_for_clock_opt.tcl

     * Moved the general clock tree synthesis (CTS) settings to 
       settings.common.cts.tcl, which is normally sourced in 
       clock_opt_cts.tcl but can be sourced in place_opt.tcl 
       if PLACE_OPT_TRIAL_CTS or PLACE_OPT_OPTIMIZE_ICGS is 
       enabled.

     * Moved the settings that are specific to the clock_opt_cts 
       step to settings.step.clock_opt_cts.tcl, which is sourced 
       in clock_opt_cts.tcl.

   - common_settings_for_advanced_node.tcl

     * Moved the general routing settings to settings.common.routing.tcl,
       which is sourced in place_opt.tcl.

   - common_settings_for_route_auto.tcl

     * Moved the settings that are specific to the route_auto step to 
       settings.step.route_auto.tcl, which is sourced in route_auto.tcl.

   - common_settings_for_route_opto.tcl

     * Moved the settings that are specific to the route_opto step to 
       settings.step.route_opt.tcl, which is sourced in route_opt.tcl.

   - common_settings_for_signoff_drc.tcl

     * Moved the settings that are specific to the signoff_drc step to
       settings.step.signoff_drc.tcl, which is sourced in signoff_drc.tcl.

   - common_settings_for_chip_finish.tcl

     * Moved the settings that are specific to chip_finish step to
       settings.step.chip_finish.tcl,which is sourced in chip_finish.tcl.

3. Renamed the outputs.tcl script to write_data.tcl. Also changed the 
   following names for consistency:
   * Changed outputs makefile target to write_data
   * Changed outputs.log file to write_data.log
   * Changed the OUTPUTS_BLOCK_NAME variable in icc2_pnr_setup.tcl to 
     WRITE_DATA_BLOCK_NAME

###############################################################################
Flow configuration changes
############################################################################### 

1. Removed the Optimization Strategy option from the SolvNet RMgen GUI.  
   The optimization strategy is now implemented as a Tcl variable, 
   OPTIMIZATION_FLOW, that is controllable within the icc2_pnr_setup.tcl
   script. The valid values for this variable are qor and ttr.

   The scripts contain conditional content based on this variable that
   differentiate the qor and ttr flows. The default flow is the QoR flow,
   which enables commands and settings with higher efforts than the TTR
   flow, to improve performance, power, and area.  

2. Removed the Physical Guidance option from the SolvNet RMgen GUI.
   The physical guidance option is now implemented as a Tcl variable,
   PLACE_OPT_SPG_FLOW, that is controllable within the icc2_pnr_setup.tcl
   script. The valid values for this variable are true and false.

   The place_opt.tcl script contains conditional content based on this 
   variable. The default is false. To enable Synopsys physical guidance 
   (SPG) input handling in the place_opt.tcl script, set this variable
   to true.

###############################################################################
Updates for icc2_common_setup.tcl 
###############################################################################

1. Reorganized the script. It now has three sections for easier configuration:
   - Required variables 
   - Optional variables
   - Variables related to flow controls of flat place and route, hierarchical 
     place and route, and the transition to design planning.

2. Added the following variables:
   - TECH_LIB_INCLUDES_TECH_SETUP_INFO
     Indicates whether TECH_LIB contains technology setup information such
     as routing layer directions, offsets, site default, and site symmetry.

   - TCL_TECH_SETUP_FILE
     Specifies a Tcl script that sets technology setup information such as
     routing layer directions, offsets, site default, and site symmetry.

   - ROUTING_LAYER_DIRECTION_OFFSET_LIST (replaces VERTICAL_ROUTING_LAYER_LIST 
     and HORIZONTAL_ROUTING_LAYER_LIST)
     Specifies the routing layers as well as their direction and offset 
     in a list of space delimited pairs. Offset values are optional. 

   - SITE_DEFAULT (renamed from SITE_DEF_DEFAULT)
     Specifies the default site name.

   - SITE_SYMMETRY_LIST (renamed from SITE_DEF_SYMMETRY_LIST)
     Specifies the site definitions and their symmetry values.

   - LINK_LIBRARY
     Specifies the logical link libraries (.db files). These libraries are 
     required only if you run VC-LP (vc_lp.tcl) and Formality (fm.tcl).

   - RELEASE_DIR_DP
     Specifies the release directory of the IC Compiler II design planning
     reference methodology. If you specify DP_RM_NDM for the INIT_DESIGN_INPUT 
     variable, the init_design.tcl script gets the design planning handoff
     design library from this directory.  

   Also added the following variables, which are primarily used for the 
   hierarchical place and route flow:
   - DESIGN_STYLE
     Specifies the design style. Valid values are flat or hier. The default 
     is flat, which indicates a totally flat flow. Specify hier for a 
     hierarchical place and route flow.

   - PHYSICAL_HIERARCHY_LEVEL
     Specifies the current level of hierarchy. Valid values are top,
     intermediate, or bottom. This variable applies only to the 
     hierarchical place and route flow.

   - RELEASE_DIR_PNR
     Specifies the release directory for the hierarchical place and route
     reference methodology. This is where the init_design.tcl script of 
     the hierarchical place and route flow gets the subblock libraries.

3. Changed the default suffix for DESIGN_LIBRARY from _lib to .nlib

###############################################################################
Updates for icc2_pnr_setup.tcl 
###############################################################################

1. Added the following variables:
   - OPTIMIZATION_FLOW
     Selects the qor or ttr optimization flow, as described in the "Flow 
     configuration change" section
   
   - PREROUTE_POWER_OPTIMIZATION_MODE 
     Replaces PREROUTE_LEAKAGE_POWER_OPTIMIZATION for enabling power
     optimization.

   - PREROUTE_POWER_OPTIMIZATION_EFFORT
     Replaces PREROUTE_TOTAL_POWER_OPTIMIZATION for specifying the power 
     optimization effort level.
   
   - PREROUTE_PIN_DENSITY_AWARE_PLACEMENT
     Replaces PREROUTE_PLACEMENT_PIN_DENSITY_AWARE for enabling pin density 
     aware placement.
   
   - PREROUTE_PLACEMENT_DETECT_CHANNEL
     Enables channel detection mode by setting the
     place.coarse.channel_detect_mode application option to true.
   
   - PREROUTE_PLACEMENT_DETECT_DETOUR
     Enables detour detection by setting the place.coarse.detect_detours 
     application option to true.
   
   - PREROUTE_PLACEMENT_MAX_DENSITY
     Sets the maximum density by setting the place.coarse.max_density 
     application option to the specified value.
   
   - PREROUTE_PLACEMENT_TARGET_ROUTING_DENSITY
     Sets the target routing density by setting the 
     place.coarse.target_routing_density application option to the
     specified value.
   
   - PREROUTE_LAYER_OPTIMIZATION_CRITICAL_RANGE
     Sets the place_opt.flow.optimize_layers_critical_range application
     option to the specified value.
   
   - TCL_USER_CONNECT_PG_NET_SCRIPT
     Specifies an optional Tcl script that contains a customized 
     connect_pg_net command and options.
   
   - TCL_NON_CLOCK_NDR_RULES_FILE
     Specifies an optional Tcl script to create an nondefault rules file 
     for signal nets before place_opt.
   
   - PLACE_OPT_DO_PATH_OPT
     Sets the place_opt.flow.do_path_opt application option to true for 
     better QoR.
   
   - PLACE_OPT_FINAL_PLACE_EFFORT_HIGH
     Sets the place_opt.final_place.effort application option to high for 
     high CPU effort in final coarse placement during place_opt.
   
   - PLACE_OPT_SPG_FLOW
     Enables physical guidance handling of place_opt commands,
     as described in the "Flow configuration change" section.
   
   - PLACE_OPT_CONGESTION_EFFORT_HIGH
     Sets the place_opt.congestion.effort application option to high.
   
   - PLACE_OPT_FINAL_PLACE_EFFORT_HIGH
     Sets the place_opt.final_place.effort application option to high.
   
   - TCL_PLACE_OPT_CLOCK_NDR_RULE_FILE 
     Specifies the script that creates the user-defined clock routing
     rules for place_opt. The clock routing rules created by this
     script replace the three predefined clock routing rules provided
     by the PLACE_OPT_CLOCK_NDR_RULE_NAME variable. 
   
   - TCL_CTS_NDR_RULE_FILE 
     Specifies the script that creates the user-defined clock routing
     rules for CTS. The clock routing rules created by this script 
     replace the three predefined clock routing rules provided by the 
     CTS_NDR_RULE_NAME variable. 
   
   - CLOCK_OPT_OPTO_CONGESTION_EFFORT_HIGH
     Sets the clock_opt.congestion.effort application option to high.
   
   - CLOCK_OPT_OPTO_PLACE_EFFORT_HIGH
     Sets the clock_opt.place.effort application option to high.
   
   - SIGNOFF_DRC_ADR
     Controls whether signoff_dix_drc is performed.
   
   - SIGNOFF_DRC_DPT_RULES
     Specifies the double-patterning rules for signoff_fix_drc.
   
   In addition, the following variables are added due to consolidation with 
   the icc2_tlc_setup.tcl script: SUB_BLOCK_REFS, USE_ABSTRACTS_FOR_BLOCKS,
   BLOCK_ABSTRACT_FOR_*, USE_ETM_FOR_BLOCKS, and ETM_UPF_MAPPING_FILE.
   
2. Removed the following variables:
   - PLACE_OPT_INTEGRATED_TWO_PASS 
   - PLACE_OPT_INITIAL_PLACE_EFFORT_HIGH
   - CCD_FLOW_DETAIL_ROUTE_BASED
   - CTS_MIN_ROUTING_LAYER and CTS_MAX_ROUTING_LAYER
   - CTS_NDR_CLOCK_LIST

###############################################################################
Updates for init_design.tcl 
###############################################################################

1. Updated DC_ASII, which is one of the options supported by the
   INIT_DESIGN_INPUT variable to facilitate a DC-ASCII flow
   - Added the commit_upf command after loading the Design Compiler 
     write_icc2_files script (${DESIGN_NAME}.icc2_script.tcl).
   - Included advanced on-chip variation (AOCV), "create path groups", and 
     "remove propagated clocks" sections as part of the DC-ASCII flow. 
     These sections are applied after loading the Design Compiler 
     write_icc2_files script.
   - Added headers to clearly distinguish between the ASCII (INIT_DESIGN_INPUT 
     set to ASCII) and DC-ASCII (INIT_DESIGN_INPUT set to DC_ASCII) flows.

2. Added a new option, DP_RM_NDM, for the INIT_DESIGN_INPUT variable to 
   accept an IC Compiler II design library from the ICC2-DP-RM. 

   After completing the ICC2-DP-RM, the init_design.tcl script can read 
   the generated design library and skip the design creation steps. This 
   is useful if you want to explore macro placement and floorplanning 
   tasks in the ICC2-DP-RM.

   To use the design library generated by the ICC2-DP-RM as the input for 
   flat place and route implementation (DESIGN_STYLE set to flat),
   a. Specify DP_RM_NDM as the value for the INIT_DESIGN_INPUT variable in 
      icc2_pnr_setup.tcl.
   b. Specify the path to the design library as the value for the
      RELEASE_DIR_DP variable in icc2_common_setup.tcl.

   When you set these variables, the init_design.tcl script sources a newly 
   added script, import_from_dp.tcl, which copies the design library from the
   ICC2-DP-RM release area specified by the RELEASE_DIR_DP variable and then 
   opens the block.    

3. Enhanced MCMM example scripts
   The previous releases provided one mcmm_example.tcl. If you specified
   this script in the TCL_MCMM_SETUP_FILE variable in icc2_common_setup.tcl, 
   the init_design.tcl script sourced it.

   This release provides two example scripts: 
   - mcmm_example.explicit.tcl 
     This script is similar to the original mcmm_example.tcl. It is a sample 
     script to create one shared mode, two corners, and two scenarios, with 
     mode, corner, and scenario constraints all explicitly provided. You can
     modify the script to accommodate your design.

     This is useful if you have explicit constraints for all your modes, 
     corners, and scenarios.

   - mcmm_example.auto_expanded.tcl 
     This script creates two scenarios with scenario constraints, and
     automatically expands the constraints to the associated modes and 
     scenarios. The script includes a remove_duplicate_timing_contexts 
     command at the end to improve runtime and capacity without loss of 
     constraints.
 
     This is useful if you have constraints only for the scenarios and 
     you want the tool to figure out (automatically expand) the mode and 
     corner constraints from the scenario constraints. 

4. Technology setup script
   In the previous release, you specified the technology-related settings 
   (routing direction, offset, site default, and site symmetry list) with
   the VERTICAL_ROUTING_LAYER_LIST, HORIZONTAL_ROUTING_LAYER_LIST, 
   SITE_DEF_DEFAULT, and SITE_DEF_SYMMETRY_LIST variables. These settings
   were applied by the init_design.tcl script, regardless of whether you 
   used TECH_FILE or TECH_LIB.

   This release provides the following enhancements:

   - These technology-related settings are now specified with the 
     ROUTING_LAYER_DIRECTION_OFFSET_LIST, SITE_DEFAULT, and 
     SITE_SYMMETRY_LIST variables. 

   - The technology setup commands are moved to a dedicated script, 
     tech_setup.tcl, which is in the rm_icc2_pnr_scripts directory. 

   - You can provide your own technology setup script instead of
     using tech_setup.tcl by setting the TCL_TECH_SETUP_FILE variable.

   - If you use a technology file (TECH_FILE is defined), the init_design.tcl 
     script sources the technology setup script before the read_def or 
     initialize_floorplan command.

   - If you use a technology library (TECH_LIB is defined), by default, 
     the init_design.tcl script assumes that the technology information 
     is already loaded and does not source the technology setup script. 
     To source the technology setup script, set the 
     TECH_LIB_INCLUDES_TECH_SETUP_INFO variable to false.

   Note that all of the technology setup variables mentioned in this 
   section are defined in the icc2_common_setup.tcl script.

5. The write_tech_file command at the end of init_design.tcl now depends 
   on the REPORT_QOR variable. If REPORT_QOR is false, the write_tech_file 
   is skipped. 

###############################################################################
Updates for common setting scripts (settings.common.*.tcl) 
###############################################################################

settings.common.opt.tcl
   * UI update for power optimization
     In the previous release, you enabled leakage power optimization by 
     setting the PREROUTE_LEAKAGE_POWER_OPTIMIZATION variable to true 
     and you enabled total power optimization by setting the 
     PREROUTE_TOTAL_POWER_OPTIMIZATION variable to true.

     In this release, the UI has been updated:
      - To enable power optimization, you set the 
        PREROUTE_POWER_OPTIMIZATION_MODE variable to the desired mode, 
        either leakage or total. If set to none, the script does not perform
        power optimization.

      - To control the power optimization effort level, set the
        the PREROUTE_POWER_OPTIMIZATION_EFFORT variable.
     
      - Added comments about how to enable percentage low-threshold-voltage
        optimization for leakage power optimization.

   * Changed the following application option settings:
     - Commented out the opt.common.max_fanout application option
       setting because the tool default changed from 999 to 40.

     - Changed the setting for the opt.common.do_physical_checks application 
       option to legalize if you select 20nm, or 16/14nm for the Technology 
       Node option in the RMgen GUI.

   * Added settings related to the following variables: 
     PREROUTE_PLACEMENT_DETECT_CHANNEL, PREROUTE_PLACEMENT_DETECT_DETOUR, 
     PREROUTE_PLACEMENT_MAX_DENSITY, and 
     PREROUTE_PLACEMENT_TARGET_ROUTING_DENSITY (for details, see the "Updates 
     for icc2_pnr_setup.tcl" section)    
   
settings.common.cts.tcl
   * Removed the "Clock NDR for the entire design" section 

   * Removed the CTS_MIN_ROUTING_LAYER and CTS_MAX_ROUTING_LAYER variables.
     Set the maximum and minimum routing layers by defining clock routing
     rules instead.
   
   * Updated the "Clock NDR examples" section to improve the usage model 
     and clarity.
     - A clock routing rule is created for root and internal nets only if 
       you specify the CTS_NDR_RULE_NAME variable in icc2_pnr_setup.tcl.

     - A clock routing rule is created for leaf nets only if you specify
       the CTS_LEAF_NDR_RULE_NAME variable in icc2_pnr_setup.tcl.

     - You can completely skip the "CTS NDR examples" section if you did
       not specify either CTS_NDR_RULE_NAME or CTS_LEAF_NDR_RULE_NAME.

     - In the previous release, you could not specify user-defined clock
       routing rules. In this release, you can specify user-defined clock
       routing rules; these rules must either already exist or you must
       provide a rule creation script. If a user-defined rule is
       found, the rule association part of the script associates the rule 
       with appropriate clock nets.

       For root and internal nets, specify the rule name with the 
       CTS_NDR_RULE_NAME variable. Specify the rule creation script with 
       the TCL_CTS_NDR_RULE_FILE variable if you specify a user-defined clock
       routing rule and the rule doesn't exist yet. 

       For leaf nets, specify the rule name with the CTS_LEAF_NDR_RULE_NAME 
       variable. Specify the rule creation script with the 
       TCL_CTS_LEAF_NDR_RULE_FILE variable if you specify a user-defined clock
       routing rule and the rule doesn't exist yet. 

     - If the predefined clock routing rules, such as icc2rm_2w2s, 
       icc2rm_2w2s_shield_default, and icc2rm_2w2s_shield_list already exist
       in the design library, the script uses the existing definitions.
   
settings.common.routing.tcl
   * Added the TCL_NON_CLOCK_NDR_RULES_FILE variable to support non-clock 
     nondefault routing rules. Use this variable to specify a script file 
     that creates nondefault routing rules for signal nets.

settings.common.non_persistent.tcl
   * Added set_threshold_voltage_group_type commands

###############################################################################
Updates for place_opt (settings.step.place_opt.tcl and place_opt.tcl) 
###############################################################################

settings.step.place_opt.tcl
   * PLACE_OPT_CLOCK_AWARE_PLACEMENT now depends on PLACE_OPT_OPTIMIZE_ICGS.
     If the PLACE_OPT_OPTIMIZE_ICGS variable is set to true, the script
     enables the functionality of the PLACE_OPT_CLOCK_AWARE_PLACEMENT variable,
     regardless of its setting.

   * Added settings for the PLACE_OPT_DO_PATH_OPT and 
     PLACE_OPT_FINAL_PLACE_EFFORT_HIGH variables (for details, see the 
     "Updates for icc2_pnr_setup.tcl" section).

   * Added settings for the PREROUTE_LAYER_OPTIMIZATION_CRITICAL_RANGE 
     variable (for details, see the "Updates for icc2_pnr_setup.tcl" section).

   * Added support for user-defined clock routing rules for congestion
     consideration during place_opt

     You can now specify a user-defined rule with the 
     PLACE_OPT_CLOCK_NDR_RULE_NAME variable. To specify the rule creation 
     script, set the TCL_PLACE_OPT_CLOCK_NDR_RULE_FILE variable. If the 
     rule is found, the rule association part of the script associates
     the rule with the clock nets.

place_opt.tcl
   * As mentioned in the "Flow configuration change" section, the following
     variables are added:

     - The OPTIMIZATION_FLOW variable, which controls whether the scripts 
       use the QoR or TTR flow.
   
     - The PLACE_OPT_SPG_FLOW variable, which controls whether the place_opt 
       commands assume physical guidance input.
   
     The effective core commands in place_opt.tcl vary depending on the 
     settings of these variables.
   
     - When OPTIMIZATION_FLOW=qor and PLACE_OPT_SPG_FLOW=false,
          place_opt -to initial_drc
          update_timing -full
          create_placement -use_seed_locs -timing_driven -congestion
          place_opt -from initial_drc
     - When OPTIMIZATION_FLOW=qor and PLACE_OPT_SPG_FLOW=true,
          create_placement -use_seed_locs -timing_driven -congestion
          place_opt -from initia_drc
     - When OPTIMIZATION_FLOW=ttr and PLACE_OPT_SPG_FLOW=false,
          place_opt
     - When OPTIMIZATION_FLOW=ttr and PLACE_OPT_SPG_FLOW=false,
          set_app_options -name place_opt.flow.do_spg -value true
   
   * Added support for a user-specified instance name prefix for cells added
     by CTS if the PLACE_OPT_TRIAL_CTS or PLACE_OPT_OPTIMIZE_ICGS variable 
     is set to true
        set_app_options -name cts.common.user_instance_name_prefix \
           -value ${PLACE_OPT_USER_INSTANCE_NAME_PREFIX}_cts
   
   * Added support for exclusive power or area optimization to refine_opt 
     with the PLACE_OPT_REFINE_OPT variable. This variable now has the 
     following valid values:
     - refine_opt
       Runs an additional refine_opt after place_opt.
     - path_opt
       Runs an additional "refine_opt -from final_path_opt" after place_opt.
     - power
       Runs "set_app_options -name refine_opt.flow.exclusive -value power" 
       plus refine_opt.
     - area
       Runs "set_app_options -name refine_opt.flow.exclusive -value area" 
       plus refine_opt.
   
###############################################################################
Updates for clock_opt (clock_opt_cts.tcl, clock_opt_opto.tcl, and 
settings.step.clock_opt_cts.tcl)
###############################################################################

settings.step.clock_opt_cts.tcl:
   As mentioned in the "RM structure change" section,
   common_settings_for_clock_opt.tcl is split into the following files:
   - settings.common.cts.tcl, which includes the general clock tree
     synthesis settings that can be applied across the flow
   - settings.step.clock_opt_cts.tcl, which includes the settings specific 
     to clock_opt_cts (as well as clock_opt_opto steps)
   The updates for settings.common.cts.tcl are already covered in the 
   "Updates for common setting scripts" section. This section covers 
   only the updates for settings.step.clock_opt_cts.tcl.
   
   * Removed the "cts.compile.enable_cell_relocation -value none" setting
     because it is no longer required by the preroute concurrent clock
     and data (CCD) flow. 
   
   * Removed the CCD_FLOW_DETAIL_ROUTE_BASED variable because the CCD
     flow is now detail-route-based by default.
   
   * Added the following local skew optimization comments for the non-CCD flow:
        ## CCD flow by default enables local skew CTS/CTO under the hood.
        ## For non-CCD flow, to improve local skew of timing critical register pairs,
        #  uncomment the following to enable local skew optimization during CTS and CTO:
        #	set_app_options -name cts.compile.enable_local_skew -value true
        #	set_app_options -name cts.optimize.enable_local_skew -value true

   * Added support for CLOCK_OPT_OPTO_CONGESTION_EFFORT_HIGH and 
     CLOCK_OPT_OPTO_PLACE_EFFORT_HIGH.

clock_opt_cts.tcl:
   * Added support for a user-defined instance name prefixes for new cells 
     - The prefix for cells added by CTS is set with the following command:
          set_app_options -name cts.common.user_instance_name_prefix 
             -value $CLOCK_OPT_CTS_USER_INSTANCE_NAME_PREFIX
     - The prefix for cells added by data path optimization when CCD is 
       enabled is set with the following command:
          set_app_options -name opt.common.user_instance_name_prefix \
             -value ${CLOCK_OPT_CTS_USER_INSTANCE_NAME_PREFIX}_opt

clock_opt_opto.tcl
   * Added support for a user-defined instance name prefixes for new cells 
     - The prefix for cells added by data path optimization is set with the
       following command:
          set_app_options -name opt.common.user_instance_name_prefix 
             -value $CLOCK_OPT_OPTO_USER_INSTANCE_NAME_PREFIX
     - The prefix for cells added by CTS when CCD is enabled is set with the
       following command:
          set_app_options -name cts.common.user_instance_name_prefix \
             -value ${CLOCK_OPT_OPTO_USER_INSTANCE_NAME_PREFIX}_cts

###############################################################################
Updates for route_opt (settings.step.route_opt.tcl and route_opt.tcl)
###############################################################################

settings.step.route_opt.tcl 
   * Enabled delay calculation to use the CCS receiver model during timing 
     analysis
        set_app_options -name time.enable_ccs_rcv_cap -value true
   
   * Added support for ROUTE_OPT_CTO when the CCD flow is enabled.
     In the previous release, ROUTE_OPT_CTO was disabled when CCD_FLOW 
     was enabled. In this release, ROUTE_OPT_CTO can perform DRC fixing 
     when CCD_FLOW is enabled.
   
route_opt.tcl
   * Added support for a user-defined instance name prefixes for new cells 
     - The prefix for cells added by data path optimization is set with the
       following command:
          set_app_options -name opt.common.user_instance_name_prefix \
             -value $ROUTE_OPT_USER_INSTANCE_NAME_PREFIX
     - The prefix for cells added by CTS when ROUTE_OPT_CTO is enabled is 
       set with the following command:
          set_app_options -name cts.common.user_instance_name_prefix \
             -value $ROUTE_OPT_CTO_USER_INSTANCE_NAME_PREFIX
   
   * Disabled CCD_FLOW and ROUTE_OPT_CTO for the second route_opt run in the
     QoR flow.
     You should examine the QoR of the first route_opt run to determine 
     whether these features are needed for the second route_opt run.

###############################################################################
Updates for signoff_drc (settings.step.signoff_drc.tcl and signoff_drc.tcl)
###############################################################################

settings.step.signoff_drc.tcl
   * Removed the signoff.fix_drc.read_frame_view_only setting because it
     no longer exists.
   
   * Added a check to ensure that the signoff.check_drc.runset is specified 
     before running the signoff_check_drc or signoff_fix_drc commands.
   
   * Added SIGNOFF_DRC_ADR to control whether signoff_fix_drc is performed.
   
   * Added support for double-patterning rules with the SIGNOFF_DRC_DPT_RULES
     variable. When you set this variable and the SIGNOFF_DRC_ADR variable 
     is true, the script 
     1. Sets the signoff.fix_drc.custom_guidance application option to dpt
     2. Runs the signoff_fix_drc command with the 
       "-select_rules $SIGNOFF_DRC_DPT_RULES" option 
     3. Resets the signoff.fix_drc.custom_guidance application option to off

###############################################################################
Updates for chip_finish (settings.step.chip_finish.tcl and chip_finish.tcl)
###############################################################################

chip_finish.tcl
   * Added the signoff_check_drc command after the signoff_create_metal_fill 
     command to check for errors in the signoff_create_metal_fill database.  
   
   * Added a check to ensure that the time.si_enable_analysis application 
     option is set to true for signal electromigration (EM) analysis.
     Signal integrity analysis must be enabled to consider delta transition 
     and coupling capacitance in the signal EM analysis. If it is not enabled, 
     the script enables it before signal EM analysis and disables it after.

###############################################################################
Updates for write_data (write_data.tcl)
###############################################################################

* Added the following comment to write_gds for writing out the GDSII file 
  with the -force option even if mismatches are found.
     ## If there's any design mismatches found, write_gds will not write out GDS, since GDS will be used for tape-out.
     #  If you still want to write out GDS despite of mismatches, append the -force option to the write_gds command.

* Updated the write_verilog command options.
  - Added additional cell types (physical_only_cells and cover_cells) to the 
    list of cells specified by the -exclude option. 
  - Added write_verilog for Formality (with PG, no physical-only cells, and 
    no supply statements).
  - Added write_verilog for VC-LP (with PG, no physical-only cells, no 
    diodes, and no supply statements).

###############################################################################
Updates for reporting (report_qor.tcl)
###############################################################################

* Added a new reporting script, report_qor.nosplit.tcl.
  The new script uses the -nosplit option with the reporting commands,
  while the existing report_qor.tcl script does not. By default, the
  script uses report_qor.tcl. To use report_qor.nosplit.tcl, set the
  REPORT_QOR_SCRIPT variable.

* Added message printing for each section to show the reporting progress. 
  For example,
     puts "RM-info: Reporting timing constraints ...\n"

* Changed the reporting for the init_design step so that report_clock_qor 
  generates reports only for cell areas and clock structures.

* Changed the REPORT_QOR_REPORT_POWER default from true to false.

* Added the -ems_database option to the three check_design commands to 
  generate a unique EMS database for each run.

* Added support for report_utilization.

###############################################################################
Micellaneous updates 
###############################################################################

* Added support for a user-specified PG connection script.
  To specify the Tcl script that contains a customized connect_pg_net 
  command and options, use the TCL_USER_CONNECT_PG_NET_SCRIPT variable. 
  This can be helpful in situations such as when optimizations add cells
  with bias pins which need to be manually connected. 
  The specified script file is sourced by all the main 
  scripts before the save_block command.

* Added the "print_message_info -ids * -summary" command at the end of 
  each implementation script. This command prints a summary of the 
  messages encountered during the script execution. 

* Added a new script, fm.tcl, for formal verification with Formality
  This script reads the Verilog and UPF files output by the write_data 
  step. If you use this feature, you must specify the LINK_LIBRARY 
  variable in icc2_common_setup.tcl.

* Added a new script, vc_lp.tcl, to support for low power static signoff
  analysis with Verification Compiler.
  This script reads the Verilog and UPF files output by the write_data 
  step. If you use this feature, you must specify the LINK_LIBRARY 
  variable in icc2_common_setup.tcl.


K-2015.06-SP4 Updates
=====================

############################################################
Updates for init_design.tcl 
############################################################
* Added the TCL_USER_INIT_DESIGN_POST_SCRIPT variable. 
  Use this variable to define customized commands at the very end of init_design.tcl,
  before the save_block command.

############################################################
Updates for common_settings_for_all.tcl 
############################################################
* Added the opt.common.do_physical_checks application option, which defaults to "legalize".
  If you choose a setting other than Established Nodes for the TECHNOLOGY NODE option on RMgen, 
  this application option is added to the reference methodology script

############################################################
Updates for common_settings_for_place_opt.tcl 
############################################################
* Added support for the integrated clock-gating cell(ICG) optimization flow of the place_opt command, 
  which is controlled by the PLACE_OPT_OPTIMIZE_ICGS and PLACE_OPT_OPTIMIZE_ICGS_CRITICAL_RANGE variables.

  The PLACE_OPT_OPTIMIZE_ICGS variable sets the place_opt.flow.optimize_icgs application option to true.
  This enables ICG optimization during the place_opt command, which includes trial clock tree synthesis, 
  timing-aware ICG splitting, and clock-aware placement for critical enable paths. 

  If enabled, common_settings_for_clock_opt.tcl is sourced before the place_opt command, so that the 
  clock tree synthesis related settings are applied before the trial clock tree synthesis.
 
  The aggressiveness of splitting can be controlled by the PLACE_OPT_OPTIMIZE_ICGS_CRITICAL_RANGE variable,
  which sets the value for the place_opt.flow.optimize_icgs_critical_range application option. By default, this
  does not have a value. Specify a value between 0 and 1. A larger value results in more splitting.
  If set to a specific value X, only the ICGs whose enable pin violations are within {EN_WNS, EN_WNS*(1-X)} are considered 
  for splitting. A value of 0.75 means only ICGs with enable pin violations between 1*EN_WNS and 0.25*EN_WNS are split,
  while the ICGs with violations less than 0.25*EN_WNS are skipped. 

* Added support for placement auto-bound for ICGs, which is controlled by the PLACE_OPT_ICG_AUTO_BOUND variable.
  
  It enables placement to use automatic group bounds created during  the placement stages for ICGs and their sinks. 
  This is an optional feature that you can enable, in addition to using the PLACE_OPT_OPTIMIZE_ICGS
  variable. It sets the place.coarse.icg_auto_bound application option to true.

* Added support for trial clock tree synthesis, which is controlled by the PLACE_OPT_TRIAL_CTS variable.

  It enables early clock tree synthesis and is useful for low power placement (PREROUTE_LOW_POWER_PLACEMENT),
  and ICG optimization flow (PLACE_OPT_OPTIMIZE_ICGS). When enabled, propagated clocks are used throughout the 
  place_opt flow. The variable sets the place_opt.flow.trial_clock_tree application option to true.

  Note that if you set the PLACE_OPT_OPTIMIZE_ICGS variable to true, the place_opt command automatically enable 
  trial clock tree synthesis. So you do not have to manually set the PLACE_OPT_TRIAL_CTS variable to true.  

* Added support for clock-aware placement, which is controlled by the PLACE_OPT_CLOCK_AWARE_PLACEMENT variable.

  It enables placement guided by ICG's enable timing criticality. The place_opt command tries to improve ICG enable
  timing by placing the timing critical ICGs and their fanout cells at better locations for ICG enable paths.
  The variable sets the place_opt.flow.clock_aware_placement application option to true.

  Note that if you set the PLACE_OPT_OPTIMIZE_ICGS variable to true, the place_opt command automatically enable 
  clock-aware placement. So you do not have to manually set the PLACE_OPT_CLOCK_AWARE_PLACEMENT variable to true.  
  
* Added support for modeling clock net non default rules (NDR) during the place_opt command, which is controlled by the 
  PLACE_OPT_CLOCK_NDR_RULE_NAME, PLACE_OPT_CLOCK_NDR_SHIELDING_LAYER_WIDTH_LIST, PLACE_OPT_CLOCK_NDR_SHIELDING_LAYER_SPACING_LIST, 
  PLACE_OPT_CLOCK_NDR_NET_LIST, PLACE_OPT_CLOCK_NDR_MIN_ROUTING_LAYER, and PLACE_OPT_CLOCK_NDR_MAX_ROUTING_LAYER variables.

  This is only active if none of PLACE_OPT_OPTIMIZE_ICGS or PLACE_OPT_TRIAL_CTS variables are enabled.
  If either is enabled, the common_settings_for_clock_opt.tcl file is sourced before the place_opt command, and the clock tree synthesis 
  NDRs are created before the place_opt command is run. THis negates the need for modeling clock net NDR during the place_opt command by 
  using the corresponding variables.

  If the PLACE_OPT_CLOCK_NDR_RULE_NAME variable is set to one of the three predefined routing rule names, icc2rm_2w2s, 
  icc2rm_2w2s_shield_default, or icc2rm_2w2s_shield_list,the rule is created and associated with the pre-clock-tree clock nets 
  using the set_routing_rule command. This is useful if you want to model the clock net NDRs during the place_opt command.

  Before CTS starts, before applying clock tree synthesis specific clock NDRs on the clock nets, the RM scripts automatically clears 
  the NDRs created during the place_opt command from the clock nets. See the update for the common_settings_for_clock_opt.tcl.  

############################################################
Updates for common_settings_for_clock_opt.tcl 
############################################################
* If the PLACE_OPT_OPTIMIZE_ICGS or PLACE_OPT_TRIAL_CTS variable is enabled for the place_opt command, the 
  common_settings_for_clock_opt.tcl file is sourced before the place_opt command, instead of before the clock_opt command.
  
* If the PLACE_OPT_CLOCK_NDR_RULE_NAME variable is specified for the place_opt step, to avoid any conflicts, the 
  PLACE_OPT_CLOCK_NDR_RULE_NAME setting is cleared from all or the specified clock nets before the CTS_NDR_RULE_NAME setting is defined,

############################################################
Updates for clock_opt.tcl 
############################################################
* Added example of manual propagation of all clocks when additional modes and scenarios 
  are activated after clock tree synthesis with the synthesize_clock_trees -propagate_only command.

############################################################
Updates for route_opt.tcl 
############################################################
* [QoR flow updates]
  If the CCD_FLOW variable is set to true (the default for the QoR flow), concurrent clock and data (CCD) optimization is enabled 
  only for the first route_opt command. It is disabled for the second route_opt command.

* Added the TCL_USER_ROUTE_OPT_SCRIPT variable. 
  Use this variable to define customized route_opt commands to replace the RM's single route_opt command of the default flow
  or double route_opt commands of the QoR flow.

############################################################
Updates for report_qor.tcl 
############################################################
* The report_threshold_voltage_group command is now only run after the init_design step is done.

############################################################
Lynx Compatibility
############################################################
* This release provides support for the Lynx-compatible reference methodology
  flow. For information about these enhancements, see the file named
  Release_Notes.LynxCompatible-RM.txt.


K-2015.06-SP2 Updates
=====================

############################################################
Updates for RMgen options  
############################################################
* Added the Multivoltage and Multisupply option on RMgen.
  You can choose either the UPF Prime or Golden UPF flow. The default is 
  UPF Prime.

* Added the Physical Guidance option on RMgen, which enables the physical 
  guidance flow. 
  You can choose either false or true. The default is false.

* Added the Technology Node option on RMgen.
  You can choose either Established Nodes, 20nm, or 16/14nm. The default 
  is Established Nodes.
  The common_settings_for_advanced_node.tcl script, as well as other 
  reference methodology scripts, show only the contents specific to your 
  selection.  

  Note that the ADVANCED_NODE Tcl variable used in the previous release 
  is now retired. 

############################################################
Updates for init_design.tcl 
############################################################
* Updated the recommendation to use the technology file for the
  create_lib command.
  The TECH_FILE variable is now the recommended input to create a 
  design library.

* Added support for reading multiple Verilog and DEF files.
  As a result, the VERILOG_NETLIST_FILE variable is renamed to 
  VERILOG_NETLIST_FILES and the DEF_FILE variable is renamed to DEF_FILES.

* Added a new INIT_DESIGN_INPUT Tcl variable, which has a default of ASCII.
  For the Design Compiler to IC Compiler II ASCII flow, set this variable 
  to DC_ASCII. This setting modifies the reference methodology scripts to 
  read the design files generated by the Design Compiler write_icc2_files 
  command by sourcing the run script from the Design Compiler output 
  directory. To specify the Design Compiler output directory, use the
  DC_RESULTS_DIR Tcl variable. The reference methodology scripts uses
  the following command to source the run script:
     source ${DC_RESULTS_DIR}/${DCRM_FINAL_DESIGN_ICC2}/${DESIGN_NAME}.icc2_script.tcl

[Physical guidance updates]
  If you choose true for the Physical Guidance option on RMgen, you should
  use the files generated by the Design Compiler write_icc2_files command
  by setting the INIT_DESIGN_INPUT variable to DC_ASCII.

[Multivoltage and multisupply updates]
* Added support for reading in a supplemental UPF file if you choose 
  GOLDEN_UPF for the Multivoltage or Multisupply option on RMgen.
  To specify the supplemental UPF file, use the UPF_SUPPLEMENTAL_FILE variable.
  The reference methodology script runs the load_upf command on the file
  specified by the UPF_FILE variable, followed by the file specified by 
  the UPF_SUPPLEMENTAL_FILE variable.

* Added the resolve_pg_nets command after the read_def command.

* Added a new example script, power_switch_example.tcl, for power-switch 
  insertion, assignment, and connection.

############################################################
Updates for mcmm_example.tcl 
############################################################
* Added the remove_duplicate_timing_contexts command in comments, which 
  removes duplicate modes, corners, and scenarios and improves runtime 
  and capacity.
  This comment replaces the comments about the 
  icc2_minimize_modes_and_corners.tbc utility in the previous release.

* Added a comment that corner constraints should include the
  set_parasitic_parameters command to refer to the parasitics read.

############################################################
Updates for place_opt.tcl and common_settings_for_place_opt.tcl
############################################################
* Added support for the multibit flow.
  A new script, multibit_example.tcl, is added to show an example of 
  performing banking in a place_opt flow.
  To use the multibit flow, set the TCL_USER_PLACE_OPT_SCRIPT variable
  to the name of the example file (or your own customized multibit script).
  When you set this variable, the reference methodology script replaces
  the original place_opt command with the specified script.

* Added support to specify the power scenario for the read_saif command
  by setting the new SAIF_FILE_POWER_SCENARIO Tcl variable.

[Physical guidance updates]
* Added support for the physical guidance flow if you choose true for the
  Physical Guidance option on RMgen.
  The following application option is enabled in the 
  common_settings_for_place_opt.tcl file:
	set_app_options -name place_opt.flow.do_spg -value true 

############################################################
Updates for clock_opt_cts.tcl and clock_opt_opto.tcl and 
common_settings_for_clock_opt.tcl
############################################################
[Concurrent clock and data optimization (CCD) updates]
* Removed options that are no longer needed for the preroute CCD flow from 
  the clock_opt_opto.tcl and common_settings_for_clock_opt.tcl scripts:

  - Removed the following application options, which were set to false
    in the previous release:
       route.global.timing_driven
       route.track.timing_driven
       route.detail.timing_driven
   
  - Removed the -reuse_existing_global_route true option from the 
    route_group command.

* Added support for detail-route-based CCD as an optional feature for the
  preroute CCD flow.
  To enable this feature, set the CCD_FLOW_DETAIL_ROUTE_BASED Tcl variable
  to true. When this variable is true, the reference methodology scripts
  use the following application option settings:
     set_app_options -name clock_opt.flow.enable_ccd_route_clock -value true
     set_app_options -name clock_opt.flow.enable_ccd_route_clock_eco -value true

* Added comments to the common_settings_for_clock_opt.tcl script as a 
  reminder to make sure that flip-flops are enabled for clock tree 
  synthesis because CCD can size flip-flops to improve timing. 

* Moved the connect_pg_net command to after postroute clock tree optimization.

############################################################
Updates for route_auto.tcl and common_settings_for_route_auto.tcl 
############################################################
* Added support for an IC Compiler-style redundant via mapping file
  by setting the new TCL_USER_ICC_REDUNDANT_VIA_MAPPING_FILE Tcl variable.

  The existing TCL_USER_REDUNDANT_VIA_MAPPING_FILE variable is for a via
  mapping file that uses IC Compiler II via mapping commands.
  The new TCL_USER_ICC_REDUNDANT_VIA_MAPPING_FILE variable is for a via
  mapping file that uses IC Compiler define_zrt_redundant_vias commands.
  If you set the TCL_USER_REDUNDANT_VIA_MAPPING_FILE variable, the reference
  methodology script sources the specified file.
  If you set the TCL_USER_ICC_REDUNDANT_VIA_MAPPING_FILE variable, the
  reference methodology script runs the add_via_mapping -from_icc_file 
  command.
  These two variables are mutually exclusive.      

############################################################
Updates for route_opt.tcl and common_settings_for_route_opt.tcl 
############################################################
* Added the capability to reshield nets during route_opt that were 
  shielded in a previous route_auto step.
  This feature is controlled by the new ROUTE_OPT_RESHIELD Tcl variable.
  To use this feature, the ROUTE_AUTO_CREATE_SHIELDS variable must be set 
  to either before_route_auto or after_route_auto, which means that 
  shielding is performed during route_auto.

  If you set the ROUTE_OPT_RESHIELD variable to incremental, the 
  reference methodology script performs reshielding during the 
  route_opt command. This is done by setting the following application 
  option in the common_settings_for_route_opt.tcl script:
     set_app_options -name route.common.reshield_modified_nets -value reshield

  If you set the ROUTE_OPT_RESHIELD variable to after_route_opt, the
  reference methodology script performs reshielding by running the
  create_shields command after the route_opt command.

* Removed the time.enable_si application option as it is now persistent in 
  the design database.
  In the previous release, this setting had to be reapplied in each new 
  IC Compiler II session, such as the route_opt, chip_finishing, and 
  signoff_drc steps. This is no longer needed.
  This application option is now set only in common_settings_for_route_auto.tcl

[Technology node updates]
* Added a setting to increase the number of ECO routing loops to 10 during 
  the route_opt command.
  If you choose a setting other than Established Nodes for the TECHNOLOGY NODE 
  option on RMgen, the following application option is added to the
  reference methodology script: 
     set_app_options -name route.detail.eco_max_number_of_iterations -value 10

############################################################
Updates for chip_finish.tcl and common_settings_for_chip_finish.tcl 
############################################################
* For the filler insertion flow, added checks to make sure that the
  CHIP_FINISH_METAL_FILLER_LIB_CELL_LIST and 
  CHIP_FINISH_NON_METAL_FILLER_LIB_CELL_LIST variables are specified.

* Added the CHIP_FINISH_CREATE_METAL_FILL variable to enable or disable 
  IC Validator In-Design metal fill insertion. The default is false.
  This variable must be set to true for the 
  CHIP_FINISH_CREATE_METAL_FILL_TRACK_BASED and 
  CHIP_FINISH_CREATE_METAL_FILL_TIMING_DRIVEN_THRESHOLD variables 
  to be effective.

* Added a check to make sure that a runset is provided for non-track-based 
  metal fill insertion.
  For non-track-based metal fill insertion, IC Validator In-Design metal 
  fill insertion requires a runset. If the CHIP_FINISH_CREATE_METAL_FILL 
  variable is set to true, you can enable track-based metal fill insertion
  by setting the CHIP_FINISH_CREATE_METAL_FILL_TRACK_BASED variable to
  true. The default is false.
  The reference methodology script checks whether the 
  CHIP_FINISH_CREATE_METAL_FILL_RUNSET variable is specified when the
  CHIP_FINISH_CREATE_METAL_FILL_TRACK_BASED variable is set to false.

############################################################
Updates for outputs.tcl 
############################################################
* Added the change_names command as a comment. Uncomment the command to 
  use it.
     change_names -rules verilog -hierarchy

* Added the write_script command.
  This command writes out the following files:
  - mode_{mode_name}.tcl for mode-specific information
  - corner_{corner_name}.tcl for corner-specific information
  - design.tcl for non-mode or non-corner specific information
  - cts.tcl for clock tree synthesis options 
  - top.tcl, which sources all the other scripts

* Updated the write_gds command.
  The workaround to run the save_block command before the write_gds command
  when the USE_RM_BLOCK_NAME_AS_LABEL variable is set to true is no longer 
  needed and has been removed.

[Multivoltage or multisupply updates]
* Writes out a UPF file that is compatible with other Synopsys tools.
  By default, the mv.upf.write_crosstool_wrappers application option
  is set to true for generating Verilog netlists and also to write out
  UPF files compatible with other Synopsys tools. 

* Added the save_upf command for supplemental UPF files.
  If you select GOLDEN UPF for the Multivoltage or Multisupply RMgen option,
  the reference methodology script includes the save_upf -format supplemental 
  command.
  This command writes out supplemental UPF files both with or without explicit 
  supply net connections. 

############################################################
Updates for common_settings_for_advanced_nodes.tcl 
############################################################
[Technology node updates]
* If you choose Established Nodes for the Technology Node RMgen option,
  this script is not included in the download.

* Updated the recommended value for route.common.net_min_layer_mode.
  If you choose a setting other than Established Nodes for the Technology 
  Node RMgen option, the application option is set to soft for maximum 
  routability. In the previous release, this application option was
  set to allow_pin_connection for advanced nodes.

############################################################
Updates for report_qor.tcl 
############################################################
* Added the report_design command to list information and statistics about 
  the various netlist, floorplan, library, and routing objects of the 
  current design.

  For preroute stages, the reference methodology script uses the 
  report_design -nosplit -library -netlist -floorplan command.
  For postroute stages, the reference methodology script adds the
  -routing option to this command.

* Added the check_design command to write the error, warning, and 
  information messages generated by running checks on design.

  The reference methodology script runs the following predefined mega-checks:
  - The pre_placement_stage check at the end of the init_design.tcl script
  - The pre_clock_tree_stage check at the end of the place_opt.tcl script
  - The pre_route_stage check at the end of the clock_opt_opto.tcl script

[Multivoltage or multisupply updates]
* Added the report_mv_path command to report all unassociated isolation or 
  level-shifter cells in the design.

* Added a comment to note that the power.propagation_effort application 
  option affects only the effort level used during the propagation of 
  switching activity by the report_power command.

############################################################
Miscellaneous Updates  
############################################################
* Added a new script for non-persistent settings that is sourced by every 
  step after the init_design step.
  This script includes the following settings:
  - Placement spacing labels and rules set by the set_placement_spacing_label 
    and set_placement_spacing_rule commands
  - SAIF information used by the write_saif and read_saif commands
  - Keepout margins specified for library cells by using the 
    create_keepout_margin command with the get_lib_cells command

* Ease of use:
  Added support for a user-specified new instance prefix for optimization 
  and clock tree synthesis commands.
  - Added the PLACE_OPT_USER_INSTANCE_NAME_PREFIX variable to specify 
    the setting for the opt.common.user_instance_name_prefix application 
    option used for new instances added by the place_opt command in the 
    place_opt.tcl script
  - Added the PLACE_OPT_REFINE_OPT_USER_INSTANCE_NAME_PREFIX variable to 
    specify the setting for the opt.common.user_instance_name_prefix 
    application option used for new instances added by the refine_opt 
    command in the place_opt.tcl script
  - Added the CLOCK_OPT_CTS_USER_INSTANCE_NAME_PREFIX variable to specify
    the setting for the cts.common.user_instance_name_prefix application
    option used for new instances added by the clock_opt command in the
    clock_opt_cts.tcl script
  - Added the CLOCK_OPT_OPTO_USER_INSTANCE_NAME_PREFIX variable to specify
    the setting for the cts.common.user_instance_name_prefix application
    option used for new instances added by the clock_opt command in the
    clock_opt_opto.tcl script
  - Added the CLOCK_OPT_CTO_USER_INSTANCE_NAME_PREFIX variable to specify
    the setting for the opt.common.user_instance_name_prefix application
    option used for new instances added by the clock_opt command in the
    clock_opt_opto.tcl script
  - Added the ROUTE_OPT_USER_INSTANCE_NAME_PREFIX variable to specify
    the setting for the opt.common.user_instance_name_prefix application
    option used for new instances added by the route_opt command in the
    route_opt.tcl script


K-2015.06 Updates
=================

* Optimization Strategy
  1) TTR (default)
  2) QoR
     When you select QoR for the Optimization Strategy option in RMgen,
     the flat RM scripts are modified for high performance at a cost of
     runtime. In this release note, differences for the QoR flow are 
     indicated by [QoR flow].

############################################################
Updates for init_design.tcl 
############################################################

* Added the following variables to rm_setup/icc2_flat_setup.tcl, and 
  added related commands to init_design.tcl:

  - DESIGN_LIBRARY_SCALE_FACTOR
    Use this variable to specify the technology file length precision. 
    If you specify this variable, the -scale_factor option is added to
    the create_lib command.

  - SITE_DEF_DEFAULT 
    Use this variable to specify the default site definition for the 
    initialize_floorplan command if the technology file contains multiple 
    site definitions.

  - SITE_DEF_SYMMETRY_LIST 
    Use this variable to specify a list of site definitions and their 
    symmetry values, which are set before running the read_def or 
    initialize_floorplan command to control the site symmetry.

  - TCL_FLOORPLAN_FILE 
    Use this variable to specify a script file that defines floorplan 
    constraints that cannot be specified in the DEF file. It is sourced 
    after the read_def or initialize_floorplan command to supplement the
    information in the DEF file specified in the DEF_FLOORPLAN_FILE variable 
    or the initialize_floorplan command. 

* Added the DEF_SITE_NAME_PAIRS variable to icc2_common_setup.tcl 
  Use this variable to specify a list of site name pairs that represent a
  mapping from the DEF site name to the technology file site name. This
  variable is used by the read_def -convert_sites option.

* Added an example script, init_design_std_cell_rail_example.tcl, for 
  standard cell PG rail creation commands. The script includes the
  following commands: create_pg_std_cell_conn_pattern, set_pg_strategy, 
  and compile_pg.

* Added the "associate_mv_cells -all" command after commit_upf to associate 
  the multivoltage cells, specifically the power-switch cells.

############################################################
Updates for common_settings_for_all.tcl
############################################################

This script is sourced at the beginning of place_opt.tcl; it covers
settings that could impact multiple steps in the flow.

* Rearranged the settings in rm_icc2_flat_scripts/common_settings_for_all.tcl 
  and added the following labels:
  "PPA - Power focused features"
  "PPA - Performance focused features"
  "PPA - Area focused features"

  Use these settings if you want to focus on specific metrics for your 
  design style.

* Added the "Lib cell usage restrictions (set_lib_cell_purpose)" section,
  which includes the set_lib_cell_purpose commands for hold fixing and 
  tie cells. Also moved the set_lib_cell_purpose commands for clock tree 
  synthesis cells from common_settings_for_clock_opt.tcl to here.

* Added the following variables to rm_setup/icc2_flat_setup.tcl, and
  added the related commands to common_settings_for_all.tcl:

  - PREROUTE_PIN_DENSITY_AWARE_PLACEMENT 
    Enables pin-density-aware placement.

  - PREROUTE_AREA_RECOVERY_EFFORT 
    Sets the effort level for area recovery for place_opt, refine_opt, and 
    clock_opt.

  - PREROUTE_BUFFER_AREA_EFFORT
    Sets the effort level for reducing buffer area usage in data path 
    optimization.

  - HOLD_FIX_LIB_CELL_PATTERN_LIST 
    Specifies the library cell patterns for hold time fixing.  

* Changed the following variables in rm_setup/icc2_flat_setup.tcl:

  - Renamed PLACE_OPT_LAYER_OPTIMIZATION to PREROUTE_LAYER_OPTIMIZATION 
    and moved the related commands to common_settings_for_all.tcl.

  - Updated the description for ADVANCED_NODE to reflect its impact on 
    the REDUNDANT_VIA_INSERTION flow.

* [QoR flow] Added "set_app_options -name opt.common.max_fanout -value 40"

############################################################
Updates for common_settings_for_advanced_node.tcl 
############################################################

* Changed the setting for the route.common.connect_within_pins_by_layer_name
  application option from via_wire_standard_cell_pins to via_wire_all_pins.

* Changed the setting for the route.common.net_min_layer_mode application
  option from soft to allow_pin_connection.

* Moved the sourcing of common_settings_for_advanced_node.tcl, if 
  ADVANCED_NODE is set to TRUE, from route_auto.tcl to place_opt.tcl. 

############################################################
Updates for place_opt
############################################################

* Added the following variables to rm_setup/icc2_flat_setup.tcl:

  - TCL_PLACEMENT_SPACING_LABEL_RULE_FILE 
    Use this variable to specify the placement spacing labels and rules, 
    such as set_placement_spacing_label and set_placement_spacing_rule.

    Spacing labels and rules are not persistent and must be sourced in 
    each IC Compiler II session. When you set this variable, the specified 
    file is sourced in each stage of the flat RM flow.

  - PLACE_OPT_INITIAL_PLACE_EFFORT_HIGH 
    Use this variable to enable high-effort coarse placement for regular 
    and two-pass place_opt. This variable specifies the setting for the 
    place_opt.initial_place.effort application option.

    [QoR flow] PLACE_OPT_INITIAL_PLACE_EFFORT_HIGH is set to TRUE 
    when you select QoR for the Optimization Strategy option in RMgen.

  - TCL_USER_PLACE_OPT_SCRIPT 
    Use this variable to define customized place_opt or two-pass place_opt 
    combinations.

    Note that if you specify a valid value for this variable, the 
    PLACE_OPT_INTEGRATED_TWO_PASS variable is ignored, because the
    intention is to use a customized place_opt combination.

* Changed the following variables in rm_setup/icc2_flat_setup.tcl:

  - Added the following settings for PLACE_OPT_REFINE_OPT:
    - refine_opt
      This setting enables full refine_opt.
    - path_opt
      This setting enables path optimization (refine_opt -from final_path_opt).

############################################################
Updates for power 
############################################################

* Added the following variables to rm_setup/icc2_flat_setup.tcl:

  - REPORT_QOR_REPORT_POWER 
    Use this variable to enable report_power during QoR reporting at the 
    end of each step (report_qor.tcl)

    The default is TRUE. To skip report_power, set it to FALSE.

  - SAIF_FILE 
    Use this variable to specify the SAIF file to ensure accurate power 
    computations for features such as PREROUTE_LOW_POWER_PLACEMENT and 
    PREROUTE_TOTAL_POWER_OPTIMIZATION.

    When you set this variable, the place_opt.tcl command reads in the
    specified SAIF file.
  
  - SAIF_FILE_SOURCE_INSTANCE 
    Use this variable to specify name of the instance of the current block
    as it appears in the SAIF file.

  - SAIF_FILE_TARGET_INSTANCE 
    Use this variable to specify the name of the target instance on which 
    to annotate the switching activity.

* Added "-scenarios [all_scenarios]" to report_power to report power on all 
  active scenarios.

* Replaced "set_power_analysis_strategy -leakage average" the 
  power.leakage_mode application option with a setting of average.

  This setting is commented out in the RM because the current default 
  is recommended.

############################################################
Updates for timing analysis
############################################################

* Moved AOCV enabling from init_design.tcl to right after clock tree 
  synthesis is completed in clock_opt_cts.tcl
  - Updated the application option used to enable AOCV based on the
    K-2015.06 UI.
  - Added the time.ocvm_enable_distance_analysis application option for 
    distance analysis.
  - Added the time.aocvm_analysis_mode application option to control the
    analysis mode.

* Changed the set_scenario_status -power true option to -leakage_power 
  true and -dynamic_power true in mcmm_example.tcl.

############################################################
Updates for clock_opt 
############################################################

* Added the following variables to rm_setup/icc2_flat_setup.tcl:

  - CCD_FLOW
    Use this variable to control the concurrent clock and data optimization
    flow. The default is FALSE. 

    [QoR flow] CCD_FLOW is set to TRUE.
  
    When set to TRUE, this variable sets the following application options:
    - In clock_opt_opto.tcl before the route_group command,
      # Disable timing-driven clock routing for the preroute CCD flow
      set_app_options -name route.global.timing_driven -value false 
      set_app_options -name route.track.timing_driven -value false 
      set_app_options -name route.detail.timing_driven -value false 

    - In common_settings_for_route_opt.tcl,
      # Enable the postroute CCD flow
      set_app_options -name route_opt.flow.enable_ccd -value true 

  - CLOCK_OPT_OPTO_CTO
    Use this variable to control the clock tree optimizations after
    clock routing in clock_opt_opto.tcl.

  - ROUTE_OPT_CTO 
    Use this variable to control the clock tree optimizations after 
    route_opt in route_opt.tcl.

############################################################
Updates for common_settings_for_route_auto.tcl 
############################################################

* Updated the description for the REDUNDANT_VIA_INSERTION variable in
  rm_setup/icc2_flat_setup.tcl to explain the behavior difference when 
  ADVANCED_NODE is TRUE versus FALSE.

############################################################
Updates for route_auto.tcl 
############################################################

* Added the following variables to rm_setup/icc2_flat_setup.tcl:

  - ROUTE_AUTO_CREATE_SHIELDS 
    Use this variable to control shield creation in route_auto.tcl. 

    This variable has the following settings:
    - after_route_auto (default) 
      Use this setting to create shields after route_auto.
    - before_route_auto 
      Use this setting to create shields before route_auto.
  
    After the script runs the create_shields command, it disables virtual 
    shield extraction.

############################################################
Updates for chip_finish.tcl 
############################################################

* Added signal electromigration analysis
  - Verifies that signal integrity (time.enable_si application option)
    is enabled
  - Added the following commands:
    - read_signal_em_constraints 
    - report_signal_em 

* Added the following variables to rm_setup/icc2_flat_setup.tcl:

  - CHIP_FINISH_CREATE_METAL_FILL_TRACK_BASED
    Use this variable to enable signoff track-based metal fill insertion.
    The default is off, and the script performs pattern-based metal
    fill insertion.

    When you set this variable to generic or a technology node, the 
    -track_fill generic or -track_fill <node> option and the -fill_all_tracks 
    true option are added to the signoff_create_metal_fill command.

  - CHIP_FINISH_CREATE_METAL_FILL_TRACK_BASED_PARAMETER_FILE 
    Use this variable to specify the name of the track-fill parameter file. 
    The default is auto. 

  - CHIP_FINISH_CREATE_METAL_FILL_TIMING_DRIVEN_THRESHOLD 
    Use this variable to enable timing-driven metal fill insertion. When 
    you set this variable, the -timing_preserve_setup_slack_threshold option 
    is added to the signoff_create_metal_fill command.

    In addition, several timing-driven required settings are added to 
    common_settings_for_chip_finish.tcl. 

  - CHIP_FINISH_EM_ITF_CONSTRAINT_FILE 
    Use this variable to specify the ITF-format signal electromigration 
    constraint file.

  - CHIP_FINISH_EM_SAIF 
    Use this variable to specify the SAIF file for signal electromigration 
    analysis.

* Added the remove_cells command as a comment for filler cell removal 

############################################################
Updates for outputs.tcl 
############################################################

* This is a new script that writes the following four outputs:
  - write_verilog
  - write_def
  - write_gds
  - write_parasitics

* The script opens the block specified by the OUTPUT_BLOCK_NAME
  variable. By default, this variable is set to the block specified
  by the CHIP_FINISH_BLOCK_NAME variable. To change the block name, 
  modify the setting for the OUTPUT_BLOCK_NAME variable in 
  rm_setup/icc2_flat_setup.tcl.

* Renamed the LAYER_MAP_FILE variable in rm_setup/icc2_flat_setup.tcl
  to WRITE_GDS_LAYER_MAP_FILE; this variable specifies the layer mapping 
  file for the write_gds command.

############################################################
Updates for pt_eco.tcl
############################################################

* This is a new script that applies the ECO guidance file generated by
  the PrimeTime SI tool to a postroute design. It is an optional script
  that is included in rm_setup/Makefile_flat.
 
* This script performs the following tasks:
  - Reads in the PrimeTime ECO file, which is specified by the 
    PT_ECO_CHANGE_FILE variable
  - Legalizes the ECO cells using the minimum-physical-impact mode:
       place_eco_cells -eco_changed_cells -legalize_only \
          -legalize_mode minimum_physical_impact \
          -displacement_threshold $PT_ECO_DISPLACEMENT_THRESHOLD 
  - Runs the check_legality command
  - Performs ECO routing with timing-driven and crosstalk-driven disabled:
       set_app_options -name route.global.timing_driven -value false \
          -as_user_default  
       set_app_options -name route.track.timing_driven -value false \
          -as_user_default 
       set_app_options -name route.detail.timing_driven -value false \
          -as_user_default  
       set_app_options -name route.global.crosstalk_driven -value false \
          -as_user_default  
       set_app_options -name route.track.crosstalk_driven -value false \
          -as_user_default
       route_eco -utilize_dangling_wires true \
          -reroute modified_nets_first_then_others -open_net_driven true

* Added the following variables to rm_setup/icc2_flat_setup.tcl:
  - PT_ECO_CHANGE_FILE 
    Use this variable to specify the ECO guidance file generated by the
    PrimeTime SI write_changes command.
  - PT_ECO_DISPLACEMENT_THRESHOLD 
    Use this variable to specify the maximum displacement threshold value 
    for the place_eco_cells command.
  - PT_ECO_ACTIVE_SCENARIO_LIST 
    Use this variable to specify the scenarios to be made active during 
    the PrimeTime ECO step.
  - TCL_USER_PT_ECO_PRE_SCRIPT 
    Use this variable to specify an optional Tcl file to be sourced before
    performing PrimeTime ECO.
  - TCL_USER_PT_ECO_POST_SCRIPT 
    Use this variable to specify an optional Tcl file to be sourced after
    performing PrimeTime ECO.
  - PT_ECO_FROM_BLOCK_NAME 
    Use this variable to specify the name of the starting block for the 
    PrimeTime ECO step; the default is $ROUTE_OPT_BLOCK_NAME.

############################################################
Updates for reporting 
############################################################

* Added the following variables to rm_setup/icc2_flat_setup.tcl:
  - REPORT_QOR 
    Use this variable to control the QoR reporting task at the end of 
    each step.
   
    The default is TRUE. To disable reporting, set it to FALSE.

* Added analyze_design_violations to report_qor.tcl, which allows you to 
  analyze the violations in the design.
  - Added the following command for the place_opt and clock_opt_opto stages:
       analyze_design_violations -type setup -stage preroute 
  - Added the following command for the clock_opt_opto stage:
       analyze_design_violations -type hold -stage preroute 

############################################################
Miscellaneous updates
############################################################
* The flat RM scripts now integrate the top-level closure RM contents in 
  each of the major scripts, so that the top-level closure RM can reuse 
  most of the flat RM scripts.

  The top-level closure RM contents are controlled by the new 
  FOR_TOP_LEVEL_CLOSURE_USE variable. By default, this variable
  is FALSE, which runs the flat RM flow.

  The top-level closure flow, which reuses most of the flat RM scripts,
  automatically sets this variable to TRUE.

* Added the save_lib command after save_block in each of the major scripts

* Changed the following variables in rm_setup/icc2_flat_setup.tcl:

  - Renamed the *_DESIGN_NAME variables to *_BLOCK_NAME
    The following are the new variables:
    - INIT_DESIGN_BLOCK_NAME (was INIT_DESIGN_NAME)
    - PLACE_OPT_BLOCK_NAME (was PLACE_OPT_DESIGN_NAME)
    - CLOCK_OPT_CTS_BLOCK_NAME (was CLOCK_OPT_CTS_DESIGN_NAME)
    - CLOCK_OPT_OPTO_BLOCK_NAME (was CLOCK_OPT_OPTO_DESIGN_NAME)
    - ROUTE_AUTO_BLOCK_NAME (was ROUTE_AUTO_DESIGN_NAME)
    - ROUTE_OPT_BLOCK_NAME (was ROUTE_OPT_DESIGN_NAME)
    - SIGNOFF_DRC_BLOCK_NAME (was SIGNOFF_DRC_DESIGN_NAME)
    - CHIP_FINISH_BLOCK_NAME (was CHIP_FINISH_DESIGN_NAME)
    - PT_ECO_BLOCK_NAME (was PT_ECO_DESIGN_NAME)

  - Changed the default for the PLACE_OPT_BLOCK_NAME variable from 
    place_opt to ${DESIGN_NAME}_place_opt, which makes it easier to 
    distinguish one block from another if they are used in top-level 
    integration.

* Added the following variables to rm_setup/icc2_flat_setup.tcl:

  - USE_RM_BLOCK_NAME_AS_LABEL 
    Use this variable to control whether to use the RM block name variable 
    as a label.
  
    If set to TRUE, the saved block name for place_opt.tcl s 
    ${DESIGN_NAME}/${PLACE_OPT_BLOCK_NAME}, where $PLACE_OPT_BLOCK_NAME 
    is the label name while $DESIGN_NAME is the block name.

    If set to FALSE, the saved block name is $PLACE_OPT_BLOCK_NAME without 
    a label name, which has been the usage in the past releases.

    The copy_block commands in each core script (init_design.tcl, 
    place_opt.tcl, and so on) have been updated to accommodate these two 
    different styles.

    The default values for the *_BLOCK_NAME variables also differ depending 
    on the setting of the USE_RM_BLOCK_NAME_AS_LABEL variable. For example, 
    if USE_RM_BLOCK_NAME_AS_LABEL is set to TRUE, for place_opt.tcl, the 
    value of the PLACE_OPT_BLOCK_NAME variable is place_opt, which is used 
    as the label name, supplementing the design name, which is used as the
    block name by save_block. If USE_RM_BLOCK_NAME_AS_LABEL is set to FALSE, 
    for place_opt.tcl, PLACE_OPT_BLOCK_NAME is used as the block name, without u
    a label. 

  - TCL_USER_PLACE_OPT_POST_SCRIPT
    Use this variable to specify a customized post-processing script to
    run after place_opt.tcl.

  - TCL_USER_CLOCK_OPT_CTS_POST_SCRIPT
    Use this variable to specify a customized post-processing script to
    run after clock_opt_cts.tcl.

  - TCL_USER_CLOCK_OPT_OPTO_POST_SCRIPT
    Use this variable to specify a customized post-processing script to
    run after clock_opt_opto.tcl.

  - TCL_USER_ROUTE_AUTO_POST_SCRIPT
    Use this variable to specify a customized post-processing script to
    run after route_auto.tcl.

  - TCL_USER_ROUTE_OPT_POST_SCRIPT
    Use this variable to specify a customized post-processing script to
    run after route_opt.tcl.

  - TCL_USER_SIGNOFF_DRC_POST_SCRIPT
    Use this variable to specify a customized post-processing script to
    run after signoff_drc.tcl.

  - TCL_USER_CHIP_FINISH_POST_SCRIPT
    Use this variable to specify a customized post-processing script to
    run after chip_finish.tcl.

* Moved the report_app_options -non_default command
  In the previous release, the "report_app_options -non_default" command is 
  run after sourcing the common settings script for each step.

  Because the purpose of this command is to print out all RM and user-specified
  application options, it has been moved to after sourcing the user-specified
  preprocessing script. For example, in place_opt.tcl, the "report_app_options 
  -non_default" command was previously run before sourcing 
  TCL_USER_PLACE_OPT_PRE_SCRIPT. Now it is run afterwards, so that it also 
  captures the user-specified settings.  


* Replaced the open_block command after the copy_block command at the 
  beginning of each step with the current_block command.


J-2014.12-1 (Jan 23)
====================

The IC Compiler II Flat Reference Methodology version J-2014.12-1 provides 
the following new features, enhancements, and changes in the J-2014.12-1 
release.

############################################################
General updates
############################################################
* The application option UI and names have been updated in all scripts.
  This version of the reference methodology is only for IC Compiler II
  version J-2014.12-1 and later releases.

* The J-2014.12-1 release supports two flat flows, which are included in 
  separate tar files:
  - Default flow (J-2014.12-1_ICC2_RM_default.tar)
    The flat RM scripts included in this tar file are for default baseline 
    flow.

  - QoR flow (J-2014.12-1_ICC2_RM_qor.tar)
    The flat RM scripts included in this tar file include concurrent clock
    and data (CCD) optimization and are targeted at high performance at a
    cost of runtime.

    The scripts in the QoR flow have the following differences from the 
    default flow:
    - common_settings_for_all.tcl
      PREROUTE_TIMING_OPTIMIZATION_EFFORT_HIGH is set to TRUE (default 
      is FALSE)

    - common_settings_for_place_opt.tcl
      PLACE_OPT_INTEGRATED_TWO_PASS is set to TRUE (default is FALSE)

    - clock_opt_cts step (clock_opt_cts.tcl and 
      common_settings_for_clock_opt.tcl)
      - set_app_options -name clock_opt.flow.enable_ccd -value true 
        (default is false)
      - clock_opt -from build_clock -to build_clock 
        (default is with "-to route_clock")

    - clock_opt_opto step (clock_opt_opto.tcl)
      route_group -all_clock_nets -reuse_existing_global_route true 
      (default is without the -reuse_existing_global_route option)

    - route_opt step (route_opt.tcl)
      Two route_opt runs (default is a single route_opt run)

############################################################
Updates for init_design.tcl 
############################################################

* Changed the default command for creating the design library from 
  create_lib -technology to create_lib -use_technology_lib. The create_lib 
  -technology command is still available.

* Updated mcmm_example.tcl, which is an example script for creating modes, 
  corners, and scenarios.
  - Added notes about Synopsys recommendations to separate SDC constraints
    into corners, modes, and scenarios
  - Added notes about the utility to convert an existing SDC file into 
    corner-, mode-, and scenario-specific constraints.
    - The utility is rm_icc2_flat_scripts/icc2_minimize_modes_and_corners.tbc
    - See mcmm_example.tcl for usage information
  - Updated the contents of the rest of the scripts for mode, corner, and 
    scenario creation and populating of the constraints.  

* Added support for advanced on-chip variation (AOCV) derating factor tables 
  - Use the OCVM_CORNER_TABLE_MAPPING_LIST variable to provide a list of 
    corners and associated AOCV tables, as AOCV is corner dependent. 
    For example, "corner1 table1 corner2 table2 corner3 table3".
  - The read_ocvm command reads the table for the associated corner, if it 
    exists.

* Added support for path groups
  - Use the CREATE_PATH_GROUPS variable to enable path groups; the default is
    FALSE.
  - If you set this variable to TRUE, it sets the time.enable_io_path_groups 
    application option to true and the tool creates three I/O path groups: 
    in2reg_default, reg2out_default, and in2out_default.

* Added init_design_flat_design_planning_example.tcl to provide examples
  for I/O and macro cell placement.
  This script contains the following commands:
  - place_io
  - create_placement -floorplan
  - create_boundary_cells    

* Updated the zero-interconnect delay settings
  - The time.delay_calculation_style application option is now set to 
    zero_interconnect only in report_qor.tcl.

* Added the write_tech_file command to init_design.tcl allow you to check 
  the technology file information

############################################################
Common settings sourced by all the steps
############################################################

Added a new script, common_settings_for_all.tcl, that includes settings that 
could affect all stages in the flow. It is sourced in place_opt.tcl, where 
the settings and constraints are saved.

It includes the following settings:
  * Power related
    - Examples of threshold voltage groups 
    - set_max_lvth_percentage
    - opt.leakage.effort to enable leakage-power optimization for the
      place_opt and clock_opt flows
    - set_power_analysis_strategy -leakage average
    - The PREROUTE_LOW_POWER_PLACEMENT variable enables low power placement 
      for place_opt, clock_opt, and refine_opt
      - The script checks for active power scenarios first
  * Placement related
    - Examples of placement spacing labels and rules 
    - Example of preroute pin-density-aware placement 
  * Routing layers (required by IC Compiler II)
    - The VERTICAL_ROUTING_LAYER_LIST and HORIZONTAL_ROUTING_LAYER_LIST 
      variables specify the routing directions.
    - If the ADVANCED_NODE variable is to TRUE, runs the "set_ignored_layers 
      -min_routing_layer metal2" command.
  * Tie cells 
    The TIE_LIB_CELL_PATTERN_LIST variable specifies specify the tie cells 
    that are used for optimization.
      - Sets the dont_touch attribute to false
      - set_lib_cell_purpose -include optimization
  * Timing and optimization
    - time.enable_clock_to_data_analysis
    - The PREROUTE_TIMING_OPTIMIZATION_EFFORT_HIGH variable enables higher 
      effort timing recovery in preroute. It controls the setting of the 
      opt.timing.effort application option. The default is FALSE.

      [QoR flow] PREROUTE_TIMING_OPTIMIZATION_EFFORT_HIGH is set to TRUE.

############################################################
Updates for place_opt 
############################################################

* Added the following settings to common_settings_for_place_opt.tcl:

  - place.coarse.congestion_driven_max_util 
    Added as a comment to specify how densely the tool can pack cells in 
    uncongested regions to remove congestion from congested regions.

  - place_opt.congestion.effort 
    Added as a comment to specify the effort level for congestion reduction
    in place_opt.

* Added the following variables to rm_setup/icc2_flat_setup.tcl:

  - PLACE_OPT_INTEGRATED_TWO_PASS 
    Use this variable to enable the two-pass place_opt flow. It controls
    the setting of the place_opt.initial_place.two_pass application option.
    The default is FALSE.

    [QoR flow] PLACE_OPT_INTEGRATED_TWO_PASS is set to TRUE.

  - PLACE_OPT_GR_BASED_HFSDRC 
    Use this variable to enable global-route-based buffering during 
    high-fanout synthesis and DRC fixing. It controls the setting of
    the place_opt.initial_drc.global_route_based application option.

  - PLACE_OPT_LAYER_OPTIMIZATION 
    Use this variable to enable automatic layer optimization, which assigns 
    long, timing-critical nets to upper metal layers to improve timing. It
    controls the settings of the place_opt.flow.optimize_layers and 
    refine_opt.flow.optimize_layers application options.

  - PLACE_OPT_CLOCK_AWARE_PLACEMENT
    Use this variable to consider the impact on clock structures during 
    placement. It controls the settings of the 
    place_opt.flow.clock_aware_placement and 
    refine_opt.flow.clock_aware_placement application options.

  - PREROUTE_LOW_POWER_PLACEMENT_SAIF 
    Use this variable to specify the SAIF file, which is read before
    place_opt when low-power placement is enabled by setting the
    PREROUTE_LOW_POWER_PLACEMENT variable to TRUE. Using a SAIF file
    improves the accuracy of the power computations.

* Added [QoR flow] comments as a recommended starting point if you want to 
  customize the two-pass flow when you select QoR for the Optimization 
  Strategy option in RMgen.
  # If you would like to have a customized two-pass flow, here is the 
  # recommended starting point:
  # place_opt -to initial_place
  # place_opt -from initial_drc -to initial_drc
  # update_timing -full
  # create_placement -timing_driven -congestion -use_seed_locs
  # save_block -as ${PLACE_OPT_DESIGN_NAME}_two_pass_placement
  # place_opt -from initial_drc

############################################################
Updates for clock_opt 
############################################################

* Divided the clock_opt.tcl script into two scripts: 
  - clock_opt_cts.tcl 
  - clock_opt_opto.tcl

* Removed the following settings, which used to be in clock_opt.tcl,
  because they are no longer needed:
  - set extract_all_corners true
  - np.estimate_all_corners true

* Made the following changes for common_settings_for_clock_opt.tcl:
  - The script is now sourced by clock_opt_cts.tcl
  - Updated the clock nondefault routing rule example with default double 
    width, double spacing, and clock shielding for clock root, internal, 
    and leaf nets.
  - Added clock tree cell and restriction settings, such as library cells 
    for clock tree synthesis, don't touch cells, don't buffer nets, and 
    size-only cells.
  - Added additional clock tree constraint examples, such as 
    create_clock_balance_group, set_latency_adjustment_options, 
    maximum transition, capacitance, target skew, latency, balance points,
    skew groups, and cell spacing.  
  - The -min_routing_layer and -max_routing_layer options used to be 
    specified with the create_routing_rule command; they are now specified
    with the set_clock_routing_rules command.

* The new clock_opt_cts.tcl script performs clock tree synthesis
  - This script supports both the classic and concurrent clock and data
    flow 
    - For the classic flow, runs clock tree synthesis and clock routing 
         clock_opt -from build_clock -to route_clock
    - For the concurrent clock and data flow, runs clock tree synthesis
      with concurrent clock and data optimization
         set_app_options -name clock_opt.flow.enable_ccd -value true
         clock_opt -from build_clock -to build_clock

* The new clock_opt_opto.tcl script performs post-clock optimization
  - This script supports both the classic and concurrent clock and data
    flow 
    - For the classic flow, runs final optimization and patches broken
      clock nets
         clock_opt -from final_opto
         route_group -all_clock_nets 
    - For the concurrent clock and data flow, runs final optimization 
      and routes clock nets by reusing existing global routes
         set_app_options -name clock_opt.flow.enable_ccd -value true
         clock_opt -from final_opto
         route_group -all_clock_nets -reuse_existing_global_route true

############################################################
Updates for route_auto and route_opt 
############################################################

* Divided the common_settings_for_route_opt.tcl script into two scripts: 
  - common_settings_for_route_auto.tcl 
  - common_settings_for_route_opt.tcl

* Added the following variables to rm_setup/icc2_flat_setup.tcl:

  - ROUTE_AUTO_ANTENNA_FIXING
    Use this variable to enable antenna fixing. The default is FALSE. When 
    this variable to TRUE, 
    - The following application options are set in 
      common_settings_for_route_auto.tcl:
      - route.detail.antenna true
      - route.detail.hop_layers_to_fix_antenna true
    - Performs the following tasks in route_auto.tcl:
      - Sources TCL_ANTENNA_RULE_FILE
      - Runs check_routes -antenna true

  - TCL_ANTENNA_RULE_FILE
    Use this variable to specify the antenna rule file.

  - REDUNDANT_VIA_INSERTION
    Use this variable to enable redundant via insertion. The default is FALSE. 
    When you set this variable to TRUE, it sets application options in 
    common_settings_for_route_auto.tcl based on the setting of the 
    ADVANCED_NODE variable.
    - For established nodes (ADVANCED_NODE is FALSE, default), the RM
      enables concurrent redundant via insertion during route_auto and 
      route_opt (the route.common.post_detail_route_redundant_via_insertion 
      application option is set to medium).
    - For advanced nodes (ADVANCED_NODE is TRUE), where routing DRC violations
      could be a concern, the RM reserves space and runs a standalone 
      add_redundant_vias command after route_auto and route_opt (the
      route.common.concurrent_redundant_via_mode and  
      route.common.eco_route_concurrent_redundant_via_mode application 
      options are set to reserve_space).

  - TCL_USER_REDUNDANT_VIA_MAPPING_FILE 
    Use this variable to specify the via mapping file for redundant via 
    insertion.

  - ROUTE_OPT_LEAKAGE_POWER_OPTIMIZATION 
    Use this variable to enable leakage-power optimization during route_opt.
    This variable controls the setting of the route_opt.power_flow application
    option in common_settings_for_route_opt.tcl. 

  - ADVANCED_NODE
    Use this variable to enable settings for advanced process nodes. The
    default is FALSE. When this variable is TRUE, the route_auto.tcl
    script sources the common_settings_for_advanced_node.tcl script.

* The new common_settings_for_route_auto.tcl script
  - Is sourced by route_auto.tcl
  - Has the following changes to settings which were previously in
    common_settings_for_route_opt.tcl: 
    - Removed route.detail.force_max_number_iterations because the tool
      now determines how many iterations are needed based on the design
    - Removed the following as they are no longer needed :
      - source ./rm_icc2_flat_scripts/nset_timer_state.tbc
      - The liba.liba_nom_model_regexp application option
      - The opt.leq_take_hold_dont_touch_libcells application option
  - Sets the timer.enable_si application option, which was previously
    done in route_auto.tcl 

* The new common_settings_for_route_opt.tcl script
  - Is sourced by route_opt.tcl
  - Sets the timer.enable_si application option, which was previously
    done in route_opt.tcl

* The new common_settings_for_advanced_node.tcl script
  - Is sourced by route_auto.tcl if the ADVANCED_NODE variable is TRUE
  - Includes application option settings for 14-, 16-, and 20-nm nodes, 
    such as route.common.connect_within_pins_by_layer_name,
    route.common.global_min_layer_mode, route.common.net_min_layer_mode, 
    report_local_double_pattern_odd_cycles, and
    route.global.double_pattern_utilization_by_layer_name 
  - Includes application option settings that apply only to 14- and 16-nm 
    nodes, such as route.common.extra_nonpreferred_direction_wire_cost_multiplier_by_layer_name and route.common.via_array_mode

* Made the following changes to route_auto.tcl
  - Added a commented command to source common_settings_for_advanced_node.tcl 
    if the ADVANCED_NODE variable is TRUE
  - Performs antenna fixing if the ROUTE_AUTO_ANTENNA_FIXING variable is TRUE
  - Performs redundant via insertion if the REDUNDANT_VIA_INSERTION
    variable is TRUE.

* Made the following changes to route_opt.tcl
  - Removed update_timing -full at the end as it is no longer needed.
  - Added a commented command to source common_settings_for_advanced_node.tcl 
    if the ADVANCED_NODE variable is TRUE
  - Performs redundant via insertion if the REDUNDANT_VIA_INSERTION
    variable is TRUE.
  - [QoR flow] Runs two consecutive route_opt commands.

############################################################
Updates for signoff design rule checking 
############################################################

* Added the following variables to rm_setup/icc2_flat_setup.tcl:

  - SIGNOFF_DRC_RUNSET
    Use this variable to specify the runset for signoff design rule
    checking.
  - SIGNOFF_DRC_RUNDIR_BEFORE_ADR
    Use this variable to specify the working directory for signoff design
    rule checking before signoff_fix_drc.
    and the error data name.
  - SIGNOFF_DRC_RUNDIR_ADR
    Use this variable to specify the working directory for signoff_fix_drc.
  - SIGNOFF_DRC_RUNDIR_AFTER_ADR
    Use this variable to specify the working directory for the signoff
    design rule checking after signoff_fix_drc.

* The new signoff_drc.tcl script performs the following tasks:
  - Sources common_settings_for_signoff_drc.tcl
  - Runs the signoff_check_drc command
  - Runs the signoff_fix_drc command
  - Runs the signoff_check_drc command again

############################################################
Chip finishing related updates
############################################################

* Added the following variables to rm_setup/icc2_flat_setup.tcl:

  - CHIP_FINISH_METAL_FILLER_LIB_CELL_LIST
    Use this variable to specify the library cells used for metal
    filler cell insertion.
  - CHIP_FINISH_NON_METAL_FILLER_LIB_CELL_LIST
    Use this variable to specify the library cells used for non-metal
    filler cell insertion.
  - CHIP_FINISH_CREATE_METAL_FILL_RUNSET
    Use this variable to specify the runset used for metal fill insertion.
  - CHIP_FINISH_CREATE_METAL_FILL_RUNDIR
    Use this variable to specify the working directory for metal fill 
    insertion.

* The new chip_finish.tcl script performs the following tasks:
  - Sources common_settings_for_chip_finish.tcl
  - Performs filler cell insertion
    - Inserts metal filler cells with the create_stdcell_fillers command
    - Runs connect_pg_net -automatic  
    - Runs remove_stdcell_fillers_with_violation
    - Inserts non-metal filler cells with a second create_stdcell_fillers 
      command
  - Performs metal fill insertion
    - Inserts metal fill with the signoff_create_metal_fill command
    - Updates metal fill extraction with the "set_extraction_options 
      -real_metalfill_extraction floating" command

############################################################
MISC
############################################################

* Added the following variables to rm_setup/icc2_flat_setup.tcl:

  - PLACE_OPT_ACTIVE_SCENARIO_LIST
    Use this variable to specify the active scenarios for place_opt.

  - CLOCK_OPT_CTS_ACTIVE_SCENARIO_LIST
    Use this variable to specify the active scenarios for clock tree
    synthesis.

  - CLOCK_OPT_OPTO_ACTIVE_SCENARIO_LIST
    Use this variable to specify the active scenarios for clock tree
    optimization.

  - ROUTE_AUTO_ACTIVE_SCENARIO_LIST
    Use this variable to specify the active scenarios for route_auto.

  - ROUTE_OPT_ACTIVE_SCENARIO_LIST
    Use this variable to specify the active scenarios for route_opt.

  - SIGNOFF_DRC_ACTIVE_SCENARIO_LIST
    Use this variable to specify the active scenarios for signoff design
    rule checking and fixing.

  - CHIP_FINISH_ACTIVE_SCENARIO_LIST
    Use this variable to specify the active scenarios for chip finishing.

* Made the following changes to report_qor.tcl:
  - Added the -nosplit option to all reporting commands 
  - Changed the report_timing -report_by_design option to -report_by group 
  - Updated the options for the report_clock_qor command
  - Added report_app_options


* Removed the -automatic option from all connect_pg_net command because this
  is now the default.

J-2014.06-SP1
=============

The IC Compiler II Flat Reference Methodology version J-2014.06-SP1 provides 
the following new features, enhancements, and changes since the J-2014.06 
release.

###############
init_design.tcl
###############

* Made the following changes to init_design.tcl:
  - Removed the "set_ideal_network [all_fanout -flat -clock_tree]" command.
  - Added the "remove_propagated_clocks" command.

###################################################
clock_opt.tcl and common_settings_for_clock_opt.tcl
###################################################

* Made the following changes to clock_opt.tcl:
  - Replaced the "synthesize_clock_trees" and "route_group" commands with 
    the "clock_opt -from final_clock -to route_clock" command. 
  - Removed the "balance_clock_groups" and "update_clock_latency" commands.
  - Removed the "np.enable_mixed_mode" and "extractor.extract_by_net" 
    application options.

##################################################################
route_auto.tcl, route_opt.tcl, and common_settings_for_route_opt.tcl
##################################################################

* Made the following changes to route_auto.tcl:
  - Removed common_settings_for_route_auto.tcl, and instead sources 
    common_settings_for_route_opt.tcl.
  - Changed the setting for the timer.enable_si application option to true.
  - Added the "set_timing_state" and "compute_clock_latency" commands after 
    route_auto and before reporting.
  - Added support for antenna fixing by commenting out the 
    route.detail.antenna false setting.

* Made the following changes to route_opt.tcl:
  - Added the "route_opt" command.
  - Added the "set_timing_state" and "compute_clock_latency" commands before 
    the route_opt command.

* Made the following changes to common_settings_for_route_opt.tcl:
  - Updated various settings. There are now separate sections for timing,
    routing, and optimization.
